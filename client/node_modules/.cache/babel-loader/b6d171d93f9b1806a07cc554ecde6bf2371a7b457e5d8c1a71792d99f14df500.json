{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omdag\\\\OneDrive\\\\Desktop\\\\gfg\\\\client\\\\src\\\\pages\\\\CodeEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Box, Typography, Button, Grid, Paper, Tabs, Tab, Snackbar, Alert, List, ListItem, ListItemIcon, ListItemText, LinearProgress, FormControl, InputLabel, Select, MenuItem, Chip, Divider } from '@mui/material';\nimport { PlayArrow, Save, ArrowBack, LightbulbOutlined, BarChart, Check, MenuBook, Assignment, Code, Terminal, Assessment, Info, BugReport, Download, Upload, ContentCopy, ContentPaste } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeEditor = () => {\n  _s();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [selectedModule, setSelectedModule] = useState(searchParams.get('module') || 'full_adder');\n  const [code, setCode] = useState('');\n  const [output, setOutput] = useState('');\n  const [consoleOutput, setConsoleOutput] = useState('');\n  const [isCompiling, setIsCompiling] = useState(false);\n  const [tabValue, setTabValue] = useState(0);\n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n  const [exerciseData, setExerciseData] = useState(null);\n\n  // Available practice modules\n  const practiceModules = [{\n    id: 'full_adder',\n    name: 'Full Adder',\n    level: 'Beginner',\n    category: 'Combinational'\n  }, {\n    id: 'ripple_carry_adder',\n    name: '4-bit Ripple Carry Adder',\n    level: 'Beginner',\n    category: 'Combinational'\n  }, {\n    id: 'alu',\n    name: '4-bit ALU',\n    level: 'Intermediate',\n    category: 'Combinational'\n  }, {\n    id: 'counter',\n    name: '4-bit Counter',\n    level: 'Beginner',\n    category: 'Sequential'\n  }, {\n    id: 'shift_register',\n    name: '8-bit Shift Register',\n    level: 'Intermediate',\n    category: 'Sequential'\n  }, {\n    id: 'fsm_traffic',\n    name: 'Traffic Light Controller FSM',\n    level: 'Intermediate',\n    category: 'Sequential'\n  }, {\n    id: 'uart_tx',\n    name: 'UART Transmitter',\n    level: 'Advanced',\n    category: 'Communication'\n  }, {\n    id: 'memory_controller',\n    name: 'Simple Memory Controller',\n    level: 'Advanced',\n    category: 'Memory'\n  }, {\n    id: 'fifo',\n    name: 'Synchronous FIFO',\n    level: 'Advanced',\n    category: 'Memory'\n  }];\n\n  // Handle module selection change\n  const handleModuleChange = event => {\n    const moduleId = event.target.value;\n    setSelectedModule(moduleId);\n    setSearchParams({\n      module: moduleId\n    });\n    // Reset output\n    setOutput('');\n    setConsoleOutput('');\n    setTabValue(0);\n  };\n\n  // Fetch module data when selection changes\n  useEffect(() => {\n    // In a real application, this would be an API call\n    // For now, we'll simulate fetching data for different modules\n    const fetchModuleData = async () => {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      let moduleTemplate;\n      switch (selectedModule) {\n        case 'full_adder':\n          moduleTemplate = `module full_adder(\n  input wire a, b, cin,\n  output wire sum, cout\n);\n  // TODO: Implement full adder logic\n  // sum = a XOR b XOR cin\n  // cout = (a AND b) OR (cin AND (a XOR b))\n  \n  // Your code here:\n  \nendmodule\n\n// Testbench (uncomment to simulate)\n/*\nmodule full_adder_tb;\n  // Testbench signals\n  reg a, b, cin;\n  wire sum, cout;\n  \n  // Instantiate the full_adder\n  full_adder dut(\n    .a(a),\n    .b(b),\n    .cin(cin),\n    .sum(sum),\n    .cout(cout)\n  );\n  \n  // Test stimulus\n  initial begin\n    // Display header\n    $display(\"a b cin | sum cout\");\n    $display(\"--------+---------\");\n    \n    // Test all input combinations\n    {a, b, cin} = 3'b000; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b001; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b010; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b011; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b100; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b101; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b110; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b111; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    $finish;\n  end\nendmodule\n*/`;\n          setExerciseData({\n            id: 'full_adder',\n            title: 'Implementing a Full Adder',\n            description: 'Create a Verilog module for a full adder with inputs a, b, cin and outputs sum and cout. A full adder adds three bits and produces a sum bit and a carry bit.',\n            objectives: ['Understand the operation of a full adder circuit', 'Implement combinational logic using Verilog assign statements', 'Utilize internal wires for intermediate signals', 'Apply proper port declarations with the wire data type'],\n            background: 'A full adder is a fundamental building block in digital circuit design, used to add two binary digits along with a carry input. It produces a sum output and a carry output, which can be cascaded to create multi-bit adders.',\n            testCases: [{\n              inputs: 'a=0, b=0, cin=0',\n              expectedOutputs: 'sum=0, cout=0',\n              explanation: 'With all inputs 0, both sum and carry are 0'\n            }, {\n              inputs: 'a=1, b=0, cin=0',\n              expectedOutputs: 'sum=1, cout=0',\n              explanation: 'Adding just a single 1 gives sum=1, with no carry'\n            }, {\n              inputs: 'a=0, b=1, cin=0',\n              expectedOutputs: 'sum=1, cout=0',\n              explanation: 'Adding just a single 1 gives sum=1, with no carry'\n            }, {\n              inputs: 'a=0, b=0, cin=1',\n              expectedOutputs: 'sum=1, cout=0',\n              explanation: 'Adding just a single 1 gives sum=1, with no carry'\n            }, {\n              inputs: 'a=1, b=1, cin=0',\n              expectedOutputs: 'sum=0, cout=1',\n              explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)'\n            }, {\n              inputs: 'a=1, b=0, cin=1',\n              expectedOutputs: 'sum=0, cout=1',\n              explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)'\n            }, {\n              inputs: 'a=0, b=1, cin=1',\n              expectedOutputs: 'sum=0, cout=1',\n              explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)'\n            }, {\n              inputs: 'a=1, b=1, cin=1',\n              expectedOutputs: 'sum=1, cout=1',\n              explanation: 'Adding three 1s results in 1 with a carry of 1 (binary 11)'\n            }],\n            hints: ['Remember the boolean equations for a full adder: sum = a ⊕ b ⊕ cin and cout = (a·b) + (cin·(a⊕b))', 'Use intermediate wires to make your code more readable', 'The XOR operator in Verilog is represented by the caret symbol (^)', 'Use the & operator for AND and | operator for OR operations'],\n            truthTable: [{\n              a: 0,\n              b: 0,\n              cin: 0,\n              sum: 0,\n              cout: 0\n            }, {\n              a: 0,\n              b: 0,\n              cin: 1,\n              sum: 1,\n              cout: 0\n            }, {\n              a: 0,\n              b: 1,\n              cin: 0,\n              sum: 1,\n              cout: 0\n            }, {\n              a: 0,\n              b: 1,\n              cin: 1,\n              sum: 0,\n              cout: 1\n            }, {\n              a: 1,\n              b: 0,\n              cin: 0,\n              sum: 1,\n              cout: 0\n            }, {\n              a: 1,\n              b: 0,\n              cin: 1,\n              sum: 0,\n              cout: 1\n            }, {\n              a: 1,\n              b: 1,\n              cin: 0,\n              sum: 0,\n              cout: 1\n            }, {\n              a: 1,\n              b: 1,\n              cin: 1,\n              sum: 1,\n              cout: 1\n            }],\n            imageUrl: 'https://www.researchgate.net/publication/329466923/figure/fig12/AS:701497183633415@1544299999838/A-full-adder-circuit-and-its-truth-table.png'\n          });\n          break;\n        case 'ripple_carry_adder':\n          moduleTemplate = `module ripple_carry_adder(\n  input [3:0] a, b,\n  input cin,\n  output [3:0] sum,\n  output cout\n);\n  // TODO: Implement a 4-bit ripple carry adder\n  // Hint: You can use full adders connected in series\n  \n  // Your code here:\n  \nendmodule\n\n// Optional: Define a full adder module below\n// module full_adder(...);\n// ...\n// endmodule`;\n          setExerciseData({\n            id: 'ripple_carry_adder',\n            title: 'Implementing a 4-bit Ripple Carry Adder',\n            description: 'Create a Verilog module for a 4-bit ripple carry adder that adds two 4-bit numbers and produces a 4-bit sum and a carry out.',\n            objectives: ['Understand multi-bit adder design', 'Learn to reuse components in digital design', 'Practice connecting modules together', 'Implement a cascaded design pattern'],\n            background: 'A ripple carry adder combines multiple full adders to add multi-bit numbers. The carry bit \"ripples\" from one adder to the next, which is simple to implement but can introduce propagation delays.',\n            testCases: [{\n              inputs: 'a=0000, b=0000, cin=0',\n              expectedOutputs: 'sum=0000, cout=0',\n              explanation: 'Adding zeros gives zero'\n            }, {\n              inputs: 'a=1010, b=0101, cin=0',\n              expectedOutputs: 'sum=1111, cout=0',\n              explanation: '10 + 5 = 15 (no carry out)'\n            }, {\n              inputs: 'a=1111, b=0001, cin=0',\n              expectedOutputs: 'sum=0000, cout=1',\n              explanation: '15 + 1 = 16 (rolls over with carry)'\n            }, {\n              inputs: 'a=1111, b=1111, cin=0',\n              expectedOutputs: 'sum=1110, cout=1',\n              explanation: '15 + 15 = 30 (exceeds 4 bits)'\n            }],\n            hints: ['Start by designing or reusing a full adder module', 'Connect four full adders, with the carry output of each going to the carry input of the next', 'The first full adder takes the cin input, and the last full adder produces the cout output', 'Remember to use proper bit indices when connecting multi-bit signals'],\n            imageUrl: 'https://www.researchgate.net/publication/265755789/figure/fig1/AS:668550417743875@1536402642245/4-bit-Ripple-Carry-Adder.png'\n          });\n          break;\n        case 'alu':\n          moduleTemplate = `module alu_4bit(\n  input [3:0] a, b,\n  input [1:0] op,\n  output reg [3:0] result,\n  output zero\n);\n  // TODO: Implement a 4-bit ALU with the following operations:\n  // op = 00: ADD (a + b)\n  // op = 01: SUB (a - b)\n  // op = 10: AND (a & b)\n  // op = 11: OR (a | b)\n  // zero flag should be set when result is 0\n  \n  // Your code here:\n  \nendmodule`;\n          setExerciseData({\n            id: 'alu',\n            title: 'Designing a 4-bit ALU',\n            description: 'Create a 4-bit Arithmetic Logic Unit (ALU) that can perform addition, subtraction, AND, and OR operations.',\n            objectives: ['Design a multi-functional digital component', 'Implement operation selection using control signals', 'Practice using conditional (case) statements in Verilog', 'Understand zero flag generation'],\n            background: 'An ALU is a fundamental digital circuit that performs arithmetic and logical operations. ALUs are a critical component in CPU design, forming the heart of the execution unit.',\n            testCases: [{\n              inputs: 'a=0101, b=0011, op=00',\n              expectedOutputs: 'result=1000, zero=0',\n              explanation: 'ADD: 5 + 3 = 8'\n            }, {\n              inputs: 'a=1000, b=0011, op=01',\n              expectedOutputs: 'result=0101, zero=0',\n              explanation: 'SUB: 8 - 3 = 5'\n            }, {\n              inputs: 'a=1001, b=0011, op=10',\n              expectedOutputs: 'result=0001, zero=0',\n              explanation: 'AND: 1001 & 0011 = 0001'\n            }, {\n              inputs: 'a=1000, b=0011, op=11',\n              expectedOutputs: 'result=1011, zero=0',\n              explanation: 'OR: 1000 | 0011 = 1011'\n            }, {\n              inputs: 'a=0011, b=0011, op=01',\n              expectedOutputs: 'result=0000, zero=1',\n              explanation: 'SUB: 3 - 3 = 0 (zero flag set)'\n            }],\n            hints: ['Use a case statement to implement different operations based on the op input', 'For subtraction, remember that a - b can be implemented as a + (complement of b) + 1', 'The zero flag is set when all bits of the result are 0', 'Use the always block with blocking assignments for combinational logic'],\n            imageUrl: 'https://www.allaboutcircuits.com/uploads/articles/an-introduction-to-arithmetic-logic-units-alus-fig2.jpg'\n          });\n          break;\n        case 'fsm_traffic':\n          moduleTemplate = `module traffic_light_controller(\n  input clk,\n  input reset,\n  input enable,\n  output reg [2:0] highway_lights, // R, Y, G\n  output reg [2:0] farm_road_lights // R, Y, G\n);\n  // TODO: Implement a traffic light controller for a highway and farm road intersection\n  // The highway normally stays green, while the farm road stays red\n  // When enable is high, start the sequence to allow farm road traffic\n  // Proper yellow light timing should be included\n  // Hint: Define state parameters, create a state register, and use a state machine approach\n  \n  // Your code here:\n  \nendmodule`;\n          setExerciseData({\n            id: 'fsm_traffic',\n            title: 'Traffic Light Controller FSM',\n            description: 'Design a traffic light controller for an intersection between a highway and a farm road using a finite state machine approach.',\n            objectives: ['Implement a finite state machine (FSM) in Verilog', 'Practice sequential circuit design', 'Learn state encoding and transitions', 'Understand timing sequences in digital control systems'],\n            background: 'Traffic light controllers are classical examples of finite state machines. They need to maintain the current state, handle transitions based on inputs, and control outputs according to the current state.',\n            testCases: [{\n              inputs: 'enable=0 (steady state)',\n              expectedOutputs: 'highway=GREEN, farm=RED',\n              explanation: 'Normal operation with highway traffic flowing'\n            }, {\n              inputs: 'enable transitions to 1',\n              expectedOutputs: 'Sequence starts: highway→YELLOW→RED, farm→RED→GREEN',\n              explanation: 'Transition sequence initiated'\n            }, {\n              inputs: 'After timeout with enable=0',\n              expectedOutputs: 'Sequence ends: highway→GREEN, farm→RED',\n              explanation: 'Return to normal operation'\n            }],\n            hints: ['First, define your states using parameters (e.g., HWY_GREEN, HWY_YELLOW, etc.)', 'Use a state register to keep track of the current state', 'Implement two always blocks: one for state transitions and one for output logic', 'Don\\'t forget to handle the reset condition to initialize the FSM', 'Consider adding counters for timing the duration of each state'],\n            imageUrl: 'https://www.researchgate.net/publication/261209431/figure/fig2/AS:296969038467074@1447808916417/Basic-traffic-light-controller-state-diagram.png'\n          });\n          break;\n        default:\n          moduleTemplate = '// Select a module from the dropdown to begin';\n          setExerciseData(null);\n      }\n      setCode(moduleTemplate);\n    };\n    fetchModuleData();\n  }, [selectedModule]);\n  const handleTabChange = (_, newValue) => setTabValue(newValue);\n  const handleRunCode = () => {\n    setIsCompiling(true);\n    setOutput('');\n\n    // Simulate compilation and running\n    setTimeout(() => {\n      if (code.includes('assign sum') && code.includes('assign cout')) {\n        // Format output with color codes for terminal display\n        setOutput(`\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\n\n\\x1b[1;36mRunning simulation for full_adder module...\\x1b[0m\n\n\\x1b[1;33mTruth Table Verification:\\x1b[0m\n┌─────┬─────┬─────┬─────┬─────┬─────┬─────────────────┐\n│ \\x1b[1mTest\\x1b[0m │ \\x1b[1ma\\x1b[0m   │ \\x1b[1mb\\x1b[0m   │ \\x1b[1mcin\\x1b[0m │ \\x1b[1msum\\x1b[0m │ \\x1b[1mcout\\x1b[0m │ \\x1b[1mStatus\\x1b[0m       │\n├─────┼─────┼─────┼─────┼─────┼─────┼─────────────────┤\n│ 1   │ 0   │ 0   │ 0   │ 0   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 2   │ 0   │ 0   │ 1   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 3   │ 0   │ 1   │ 0   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 4   │ 0   │ 1   │ 1   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 5   │ 1   │ 0   │ 0   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 6   │ 1   │ 0   │ 1   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 7   │ 1   │ 1   │ 0   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 8   │ 1   │ 1   │ 1   │ 1   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n└─────┴─────┴─────┴─────┴─────┴─────┴─────────────────┘\n\n\\x1b[1;33mWaveform Simulation:\\x1b[0m\nTime  a b cin | sum cout\n----------------+----------\n0ns:  0 0 0   |  0   0\n10ns: 0 0 1   |  1   0\n20ns: 0 1 0   |  1   0\n30ns: 0 1 1   |  0   1\n40ns: 1 0 0   |  1   0\n50ns: 1 0 1   |  0   1\n60ns: 1 1 0   |  0   1\n70ns: 1 1 1   |  1   1\n\n\\x1b[1;32mSummary: 8/8 test cases passed.\\x1b[0m\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your full adder implementation works correctly.\n\n\\x1b[33mPerformance Analysis:\\x1b[0m\n• Gate Count: Approximately 5 gates (2 XOR, 2 AND, 1 OR)\n• Critical Path: Input to Sum output through 2 XOR gates\n• Additional Optimizations: Using intermediate signals improves readability\n\n\\x1b[36mDesign Feedback:\\x1b[0m\n✓ Good use of intermediate signals for readability\n✓ Properly declared wire and port types\n✓ Clean implementation of the full adder equations\n`);\n        setNotification({\n          open: true,\n          message: 'All tests passed! Great job implementing the full adder!',\n          severity: 'success'\n        });\n      } else if (code.includes('module full_adder') && code.includes('endmodule')) {\n        setOutput(`\n\\x1b[1;33mCompilation Warning:\\x1b[0m\nYour module compiles, but appears incomplete.\n\n\\x1b[1;31mRuntime Errors:\\x1b[0m\nThe simulation indicates that your implementation does not correctly produce the expected sum and cout outputs.\n\n\\x1b[1;33mVerification Results:\\x1b[0m\n┌─────┬─────┬─────┬─────┬──────┬──────┬─────────────────┐\n│ \\x1b[1mTest\\x1b[0m │ \\x1b[1ma\\x1b[0m   │ \\x1b[1mb\\x1b[0m   │ \\x1b[1mcin\\x1b[0m │ \\x1b[1msum\\x1b[0m  │ \\x1b[1mcout\\x1b[0m │ \\x1b[1mStatus\\x1b[0m       │\n├─────┼─────┼─────┼─────┼──────┼──────┼─────────────────┤\n│ 1   │ 0   │ 0   │ 0   │ x    │ x    │ \\x1b[31m✗ FAILED\\x1b[0m      │\n│ 2   │ 0   │ 0   │ 1   │ x    │ x    │ \\x1b[31m✗ FAILED\\x1b[0m      │\n│ 3   │ 0   │ 1   │ 0   │ x    │ x    │ \\x1b[31m✗ FAILED\\x1b[0m      │\n└─────┴─────┴─────┴─────┴──────┴──────┴─────────────────┘\nFurther tests skipped due to errors.\n\n\\x1b[1;36mTroubleshooting Suggestions:\\x1b[0m\n1. Make sure you've implemented the assign statements for sum and cout\n2. Check if you've correctly defined intermediate signals if needed\n3. Verify your logic equations: sum = a ^ b ^ cin and cout = (a & b) | (cin & (a ^ b))\n4. Make sure all variables are properly connected\n\n\\x1b[33mHint:\\x1b[0m Review the boolean equations for a full adder and ensure your implementation follows them.\n`);\n        setNotification({\n          open: true,\n          message: 'Your code compiles but doesn\\'t correctly implement the full adder functionality.',\n          severity: 'warning'\n        });\n      } else {\n        setOutput(`\n\\x1b[1;31mCompilation Error:\\x1b[0m\nError: Incomplete or incorrect module implementation.\n\n\\x1b[33mExpected structure:\\x1b[0m\nmodule full_adder(\n  input wire a, b, cin,\n  output wire sum, cout\n);\n  // Implementation here with proper assignments for sum and cout\nendmodule\n\n\\x1b[36mSpecific Issues:\\x1b[0m\n- ${!code.includes('module full_adder') ? 'Missing or incorrect module declaration' : 'Module declaration found'} \n- ${!code.includes('input') ? 'Missing input port declarations' : 'Input ports found'}\n- ${!code.includes('output') ? 'Missing output port declarations' : 'Output ports found'}\n- ${!code.includes('assign') ? 'Missing assign statements for outputs' : 'Assign statements found but may be incomplete'}\n- ${!code.includes('endmodule') ? 'Missing endmodule statement' : 'Endmodule statement found'}\n\n\\x1b[33mRemember:\\x1b[0m\nA full adder needs to implement the following logic:\n- sum = a XOR b XOR cin\n- cout = (a AND b) OR (cin AND (a XOR b))\n\nPlease implement the full adder logic before running the code again.\n`);\n        setNotification({\n          open: true,\n          message: 'Compilation failed. Please check your code and fix the issues.',\n          severity: 'error'\n        });\n      }\n      setIsCompiling(false);\n    }, 1500);\n  };\n  const handleSaveCode = () => {\n    setNotification({\n      open: true,\n      message: 'Code saved successfully!',\n      severity: 'success'\n    });\n  };\n  const handleCloseNotification = () => {\n    setNotification({\n      ...notification,\n      open: false\n    });\n  };\n  const handleShowHint = () => {\n    setTabValue(2); // Switch to the Hints tab\n  };\n  const handleCopyCode = () => {\n    navigator.clipboard.writeText(code);\n    setNotification({\n      open: true,\n      message: 'Code copied to clipboard!',\n      severity: 'info'\n    });\n  };\n  const handleDownloadCode = () => {\n    const blob = new Blob([code], {\n      type: 'text/plain'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${selectedModule}.v`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // More robust syntax verification\n  const verifySyntax = code => {\n    const errors = [];\n\n    // Check for basic syntax elements\n    if (!code.includes('module')) errors.push('Missing module declaration');\n    if (!code.includes('endmodule')) errors.push('Missing endmodule statement');\n\n    // Module-specific checks\n    if (selectedModule === 'full_adder') {\n      if (!code.includes('input') || !code.includes('a') || !code.includes('b') || !code.includes('cin')) errors.push('Missing input port declarations (a, b, cin)');\n      if (!code.includes('output') || !code.includes('sum') || !code.includes('cout')) errors.push('Missing output port declarations (sum, cout)');\n      if (!code.includes('assign sum') && !code.includes('assign sum =')) errors.push('Missing sum output assignment');\n      if (!code.includes('assign cout') && !code.includes('assign cout =')) errors.push('Missing cout output assignment');\n    } else if (selectedModule === 'ripple_carry_adder') {\n      if (!code.includes('input') || !code.includes('[3:0] a') || !code.includes('[3:0] b')) errors.push('Missing 4-bit input port declarations');\n      if (!code.includes('output') || !code.includes('[3:0] sum') || !code.includes('cout')) errors.push('Missing output port declarations');\n    }\n    return errors;\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"container page-container\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        mb: 4,\n        flexWrap: 'wrap',\n        gap: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          component: Link,\n          to: \"/modules\",\n          startIcon: /*#__PURE__*/_jsxDEV(ArrowBack, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 24\n          }, this),\n          sx: {\n            mb: 2\n          },\n          children: \"Back to Modules\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h1\",\n          sx: {\n            fontWeight: 'bold',\n            color: 'primary.main'\n          },\n          children: \"VeriGeek Code Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"Write, test, and simulate Verilog HDL code in your browser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          minWidth: 300\n        },\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          variant: \"outlined\",\n          size: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"module-selector-label\",\n            children: \"Practice Module\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"module-selector-label\",\n            id: \"module-selector\",\n            value: selectedModule,\n            onChange: handleModuleChange,\n            label: \"Practice Module\",\n            children: practiceModules.map(module => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: module.id,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  width: '100%',\n                  justifyContent: 'space-between'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  children: module.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 541,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(Chip, {\n                    label: module.level,\n                    size: \"small\",\n                    sx: {\n                      ml: 1,\n                      bgcolor: module.level === 'Beginner' ? '#e3f2fd' : module.level === 'Intermediate' ? '#fff8e1' : '#fbe9e7',\n                      color: module.level === 'Beginner' ? '#0277bd' : module.level === 'Intermediate' ? '#ff8f00' : '#e64a19',\n                      fontSize: '0.75rem'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 543,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 542,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 19\n              }, this)\n            }, module.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this), exerciseData && /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 3,\n        mb: 4,\n        borderRadius: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            gutterBottom: true,\n            sx: {\n              fontWeight: 'bold',\n              color: 'primary.main'\n            },\n            children: exerciseData.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            paragraph: true,\n            sx: {\n              maxWidth: '800px'\n            },\n            children: exerciseData.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            gap: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Chip, {\n            icon: /*#__PURE__*/_jsxDEV(Info, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 23\n            }, this),\n            label: `ID: ${exerciseData.id}`,\n            variant: \"outlined\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 577,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        gutterBottom: true,\n        sx: {\n          fontWeight: 'bold',\n          mt: 3\n        },\n        children: \"Learning Objectives:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        dense: true,\n        disablePadding: true,\n        sx: {\n          mb: 2\n        },\n        children: exerciseData.objectives.map((objective, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n          sx: {\n            py: 0.5\n          },\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            sx: {\n              minWidth: 36\n            },\n            children: /*#__PURE__*/_jsxDEV(Check, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: objective\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 592,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 7,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            borderRadius: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              p: 2,\n              borderBottom: 1,\n              borderColor: 'divider',\n              bgcolor: '#f5f5f5',\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Code, {\n                sx: {\n                  mr: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 17\n              }, this), \"Verilog Editor\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              color: \"text.secondary\",\n              children: \"Write your solution here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flexGrow: 1,\n              p: 0,\n              bgcolor: '#272822',\n              minHeight: '500px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: code,\n              onChange: e => setCode(e.target.value),\n              style: {\n                width: '100%',\n                height: '100%',\n                minHeight: '500px',\n                fontFamily: 'Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace',\n                fontSize: '14px',\n                padding: '16px',\n                border: 'none',\n                borderRadius: 0,\n                resize: 'none',\n                backgroundColor: '#272822',\n                color: '#f8f8f2',\n                lineHeight: '1.5',\n                outline: 'none'\n              },\n              spellCheck: \"false\",\n              placeholder: \"// Write your Verilog code here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              p: 2,\n              borderTop: 1,\n              borderColor: 'divider',\n              display: 'flex',\n              gap: 1,\n              bgcolor: '#f5f5f5'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 644,\n                columnNumber: 28\n              }, this),\n              onClick: handleRunCode,\n              disabled: isCompiling,\n              size: \"large\",\n              children: isCompiling ? 'Running...' : 'Run Code'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              startIcon: /*#__PURE__*/_jsxDEV(Save, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 653,\n                columnNumber: 28\n              }, this),\n              onClick: handleSaveCode,\n              size: \"large\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"secondary\",\n              startIcon: /*#__PURE__*/_jsxDEV(LightbulbOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 662,\n                columnNumber: 28\n              }, this),\n              onClick: handleShowHint,\n              sx: {\n                ml: 'auto'\n              },\n              size: \"large\",\n              children: \"Hint\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 5,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            height: '100%',\n            borderRadius: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tabs, {\n            value: tabValue,\n            onChange: handleTabChange,\n            sx: {\n              borderBottom: 1,\n              borderColor: 'divider',\n              bgcolor: '#f5f5f5'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Output\",\n              icon: /*#__PURE__*/_jsxDEV(Assessment, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 685,\n                columnNumber: 41\n              }, this),\n              iconPosition: \"start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Console\",\n              icon: /*#__PURE__*/_jsxDEV(Terminal, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 42\n              }, this),\n              iconPosition: \"start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Hints\",\n              icon: /*#__PURE__*/_jsxDEV(LightbulbOutlined, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 687,\n                columnNumber: 40\n              }, this),\n              iconPosition: \"start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 13\n          }, this), tabValue === 0 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flexGrow: 1,\n              p: 2,\n              fontFamily: 'Consolas, Monaco, monospace',\n              fontSize: '14px',\n              bgcolor: '#2d2d2d',\n              color: '#e6e6e6',\n              overflowY: 'auto',\n              whiteSpace: 'pre-wrap',\n              minHeight: '500px'\n            },\n            children: isCompiling ? /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                p: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n                color: \"primary\",\n                sx: {\n                  mb: 2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 707,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  color: '#a6e22e'\n                },\n                children: \"Compiling and running your code...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 708,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 706,\n              columnNumber: 19\n            }, this) : output ? /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"pre\",\n              sx: {\n                margin: 0,\n                fontFamily: 'inherit',\n                fontSize: 'inherit'\n              },\n              children: output\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              sx: {\n                color: '#75715e',\n                fontStyle: 'italic'\n              },\n              children: \"// Run your code to see the output here. // Make sure you've implemented all the required functionality.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 15\n          }, this), tabValue === 1 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flexGrow: 1,\n              p: 2,\n              fontFamily: 'Consolas, Monaco, monospace',\n              fontSize: '14px',\n              bgcolor: '#2d2d2d',\n              color: '#e6e6e6',\n              overflowY: 'auto',\n              whiteSpace: 'pre-wrap',\n              minHeight: '500px'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              sx: {\n                color: '#75715e',\n                fontStyle: 'italic'\n              },\n              children: \"// Verilog compiler messages will appear here. // This includes warnings and errors from your code.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 740,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 727,\n            columnNumber: 15\n          }, this), tabValue === 2 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flexGrow: 1,\n              p: 3,\n              bgcolor: '#fffde7',\n              overflowY: 'auto',\n              minHeight: '500px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Helpful Hints\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 758,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              paragraph: true,\n              children: \"If you're stuck, these hints may guide you in the right direction without giving away the full solution.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 761,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(List, {\n              children: exerciseData === null || exerciseData === void 0 ? void 0 : exerciseData.hints.map((hint, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n                alignItems: \"flex-start\",\n                sx: {\n                  px: 0\n                },\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  sx: {\n                    minWidth: 36,\n                    mt: 0.5\n                  },\n                  children: /*#__PURE__*/_jsxDEV(LightbulbOutlined, {\n                    color: \"warning\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 768,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 767,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: `Hint ${index + 1}`,\n                  secondary: hint,\n                  primaryTypographyProps: {\n                    fontWeight: 'bold'\n                  },\n                  secondaryTypographyProps: {\n                    variant: 'body1'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 770,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 766,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 764,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 3,\n                p: 2,\n                bgcolor: 'rgba(0, 0, 0, 0.03)',\n                borderRadius: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                gutterBottom: true,\n                sx: {\n                  fontWeight: 'bold'\n                },\n                children: \"Full Adder Logic:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 781,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                paragraph: true,\n                children: \"A full adder adds three bits (a, b, and cin) and produces a sum bit and a carry bit.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 784,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                component: \"img\",\n                src: exerciseData === null || exerciseData === void 0 ? void 0 : exerciseData.imageUrl,\n                alt: \"Full Adder Logic Diagram\",\n                sx: {\n                  width: '100%',\n                  borderRadius: 1,\n                  mb: 2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 787,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: \"The boolean equations for a full adder are:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  bgcolor: 'white',\n                  p: 2,\n                  borderRadius: 1,\n                  fontFamily: 'math',\n                  fontSize: '1rem',\n                  textAlign: 'center',\n                  mt: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  children: \"sum = a \\u2295 b \\u2295 cin\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 802,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: \"cout = (a\\xB7b) + cin\\xB7(a\\u2295b)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 803,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 793,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 780,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: notification.open,\n      autoHideDuration: 6000,\n      onClose: handleCloseNotification,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseNotification,\n        severity: notification.severity,\n        sx: {\n          width: '100%'\n        },\n        children: notification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 813,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 507,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"xTPpO2IG8Y8TmXDGDZd+EX16kEc=\", false, function () {\n  return [useSearchParams];\n});\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","Link","useSearchParams","Box","Typography","Button","Grid","Paper","Tabs","Tab","Snackbar","Alert","List","ListItem","ListItemIcon","ListItemText","LinearProgress","FormControl","InputLabel","Select","MenuItem","Chip","Divider","PlayArrow","Save","ArrowBack","LightbulbOutlined","BarChart","Check","MenuBook","Assignment","Code","Terminal","Assessment","Info","BugReport","Download","Upload","ContentCopy","ContentPaste","jsxDEV","_jsxDEV","CodeEditor","_s","searchParams","setSearchParams","selectedModule","setSelectedModule","get","code","setCode","output","setOutput","consoleOutput","setConsoleOutput","isCompiling","setIsCompiling","tabValue","setTabValue","notification","setNotification","open","message","severity","exerciseData","setExerciseData","practiceModules","id","name","level","category","handleModuleChange","event","moduleId","target","value","module","fetchModuleData","Promise","resolve","setTimeout","moduleTemplate","title","description","objectives","background","testCases","inputs","expectedOutputs","explanation","hints","truthTable","a","b","cin","sum","cout","imageUrl","handleTabChange","_","newValue","handleRunCode","includes","handleSaveCode","handleCloseNotification","handleShowHint","handleCopyCode","navigator","clipboard","writeText","handleDownloadCode","blob","Blob","type","url","URL","createObjectURL","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","verifySyntax","errors","push","className","children","sx","display","justifyContent","mb","flexWrap","gap","component","to","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","variant","fontWeight","color","minWidth","fullWidth","size","labelId","onChange","label","map","alignItems","width","ml","bgcolor","fontSize","elevation","p","borderRadius","gutterBottom","paragraph","maxWidth","icon","mt","dense","disablePadding","objective","index","py","primary","container","spacing","item","xs","md","height","flexDirection","borderBottom","borderColor","mr","flexGrow","minHeight","e","style","fontFamily","padding","border","resize","backgroundColor","lineHeight","outline","spellCheck","placeholder","borderTop","onClick","disabled","iconPosition","overflowY","whiteSpace","margin","fontStyle","hint","px","secondary","primaryTypographyProps","secondaryTypographyProps","src","alt","textAlign","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","_c","$RefreshReg$"],"sources":["C:/Users/omdag/OneDrive/Desktop/gfg/client/src/pages/CodeEditor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link, useSearchParams } from 'react-router-dom';\r\nimport { \r\n  Box, Typography, Button, Grid, Paper, Tabs, Tab, Snackbar, Alert, \r\n  List, ListItem, ListItemIcon, ListItemText, LinearProgress,\r\n  FormControl, InputLabel, Select, MenuItem, Chip, Divider\r\n} from '@mui/material';\r\nimport { \r\n  PlayArrow, Save, ArrowBack, LightbulbOutlined, BarChart, Check, \r\n  MenuBook, Assignment, Code, Terminal, Assessment, Info,\r\n  BugReport, Download, Upload, ContentCopy, ContentPaste\r\n} from '@mui/icons-material';\r\n\r\nconst CodeEditor = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [selectedModule, setSelectedModule] = useState(searchParams.get('module') || 'full_adder');\r\n  const [code, setCode] = useState('');\r\n  const [output, setOutput] = useState('');\r\n  const [consoleOutput, setConsoleOutput] = useState('');\r\n  const [isCompiling, setIsCompiling] = useState(false);\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [notification, setNotification] = useState({ open: false, message: '', severity: 'info' });\r\n  const [exerciseData, setExerciseData] = useState(null);\r\n\r\n  // Available practice modules\r\n  const practiceModules = [\r\n    { id: 'full_adder', name: 'Full Adder', level: 'Beginner', category: 'Combinational' },\r\n    { id: 'ripple_carry_adder', name: '4-bit Ripple Carry Adder', level: 'Beginner', category: 'Combinational' },\r\n    { id: 'alu', name: '4-bit ALU', level: 'Intermediate', category: 'Combinational' },\r\n    { id: 'counter', name: '4-bit Counter', level: 'Beginner', category: 'Sequential' },\r\n    { id: 'shift_register', name: '8-bit Shift Register', level: 'Intermediate', category: 'Sequential' },\r\n    { id: 'fsm_traffic', name: 'Traffic Light Controller FSM', level: 'Intermediate', category: 'Sequential' },\r\n    { id: 'uart_tx', name: 'UART Transmitter', level: 'Advanced', category: 'Communication' },\r\n    { id: 'memory_controller', name: 'Simple Memory Controller', level: 'Advanced', category: 'Memory' },\r\n    { id: 'fifo', name: 'Synchronous FIFO', level: 'Advanced', category: 'Memory' },\r\n  ];\r\n\r\n  // Handle module selection change\r\n  const handleModuleChange = (event) => {\r\n    const moduleId = event.target.value;\r\n    setSelectedModule(moduleId);\r\n    setSearchParams({ module: moduleId });\r\n    // Reset output\r\n    setOutput('');\r\n    setConsoleOutput('');\r\n    setTabValue(0);\r\n  };\r\n\r\n  // Fetch module data when selection changes\r\n  useEffect(() => {\r\n    // In a real application, this would be an API call\r\n    // For now, we'll simulate fetching data for different modules\r\n    const fetchModuleData = async () => {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      let moduleTemplate;\r\n      \r\n      switch(selectedModule) {\r\n        case 'full_adder':\r\n          moduleTemplate = `module full_adder(\r\n  input wire a, b, cin,\r\n  output wire sum, cout\r\n);\r\n  // TODO: Implement full adder logic\r\n  // sum = a XOR b XOR cin\r\n  // cout = (a AND b) OR (cin AND (a XOR b))\r\n  \r\n  // Your code here:\r\n  \r\nendmodule\r\n\r\n// Testbench (uncomment to simulate)\r\n/*\r\nmodule full_adder_tb;\r\n  // Testbench signals\r\n  reg a, b, cin;\r\n  wire sum, cout;\r\n  \r\n  // Instantiate the full_adder\r\n  full_adder dut(\r\n    .a(a),\r\n    .b(b),\r\n    .cin(cin),\r\n    .sum(sum),\r\n    .cout(cout)\r\n  );\r\n  \r\n  // Test stimulus\r\n  initial begin\r\n    // Display header\r\n    $display(\"a b cin | sum cout\");\r\n    $display(\"--------+---------\");\r\n    \r\n    // Test all input combinations\r\n    {a, b, cin} = 3'b000; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b001; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b010; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b011; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b100; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b101; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b110; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b111; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    $finish;\r\n  end\r\nendmodule\r\n*/`;\r\n          setExerciseData({\r\n            id: 'full_adder',\r\n            title: 'Implementing a Full Adder',\r\n            description: 'Create a Verilog module for a full adder with inputs a, b, cin and outputs sum and cout. A full adder adds three bits and produces a sum bit and a carry bit.',\r\n            objectives: [\r\n              'Understand the operation of a full adder circuit',\r\n              'Implement combinational logic using Verilog assign statements',\r\n              'Utilize internal wires for intermediate signals',\r\n              'Apply proper port declarations with the wire data type'\r\n            ],\r\n            background: 'A full adder is a fundamental building block in digital circuit design, used to add two binary digits along with a carry input. It produces a sum output and a carry output, which can be cascaded to create multi-bit adders.',\r\n            testCases: [\r\n              { inputs: 'a=0, b=0, cin=0', expectedOutputs: 'sum=0, cout=0', explanation: 'With all inputs 0, both sum and carry are 0' },\r\n              { inputs: 'a=1, b=0, cin=0', expectedOutputs: 'sum=1, cout=0', explanation: 'Adding just a single 1 gives sum=1, with no carry' },\r\n              { inputs: 'a=0, b=1, cin=0', expectedOutputs: 'sum=1, cout=0', explanation: 'Adding just a single 1 gives sum=1, with no carry' },\r\n              { inputs: 'a=0, b=0, cin=1', expectedOutputs: 'sum=1, cout=0', explanation: 'Adding just a single 1 gives sum=1, with no carry' },\r\n              { inputs: 'a=1, b=1, cin=0', expectedOutputs: 'sum=0, cout=1', explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)' },\r\n              { inputs: 'a=1, b=0, cin=1', expectedOutputs: 'sum=0, cout=1', explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)' },\r\n              { inputs: 'a=0, b=1, cin=1', expectedOutputs: 'sum=0, cout=1', explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)' },\r\n              { inputs: 'a=1, b=1, cin=1', expectedOutputs: 'sum=1, cout=1', explanation: 'Adding three 1s results in 1 with a carry of 1 (binary 11)' }\r\n            ],\r\n            hints: [\r\n              'Remember the boolean equations for a full adder: sum = a ⊕ b ⊕ cin and cout = (a·b) + (cin·(a⊕b))',\r\n              'Use intermediate wires to make your code more readable',\r\n              'The XOR operator in Verilog is represented by the caret symbol (^)',\r\n              'Use the & operator for AND and | operator for OR operations'\r\n            ],\r\n            truthTable: [\r\n              { a: 0, b: 0, cin: 0, sum: 0, cout: 0 },\r\n              { a: 0, b: 0, cin: 1, sum: 1, cout: 0 },\r\n              { a: 0, b: 1, cin: 0, sum: 1, cout: 0 },\r\n              { a: 0, b: 1, cin: 1, sum: 0, cout: 1 },\r\n              { a: 1, b: 0, cin: 0, sum: 1, cout: 0 },\r\n              { a: 1, b: 0, cin: 1, sum: 0, cout: 1 },\r\n              { a: 1, b: 1, cin: 0, sum: 0, cout: 1 },\r\n              { a: 1, b: 1, cin: 1, sum: 1, cout: 1 }\r\n            ],\r\n            imageUrl: 'https://www.researchgate.net/publication/329466923/figure/fig12/AS:701497183633415@1544299999838/A-full-adder-circuit-and-its-truth-table.png'\r\n          });\r\n          break;\r\n          \r\n        case 'ripple_carry_adder':\r\n          moduleTemplate = `module ripple_carry_adder(\r\n  input [3:0] a, b,\r\n  input cin,\r\n  output [3:0] sum,\r\n  output cout\r\n);\r\n  // TODO: Implement a 4-bit ripple carry adder\r\n  // Hint: You can use full adders connected in series\r\n  \r\n  // Your code here:\r\n  \r\nendmodule\r\n\r\n// Optional: Define a full adder module below\r\n// module full_adder(...);\r\n// ...\r\n// endmodule`;\r\n          \r\n          setExerciseData({\r\n            id: 'ripple_carry_adder',\r\n            title: 'Implementing a 4-bit Ripple Carry Adder',\r\n            description: 'Create a Verilog module for a 4-bit ripple carry adder that adds two 4-bit numbers and produces a 4-bit sum and a carry out.',\r\n            objectives: [\r\n              'Understand multi-bit adder design',\r\n              'Learn to reuse components in digital design',\r\n              'Practice connecting modules together',\r\n              'Implement a cascaded design pattern'\r\n            ],\r\n            background: 'A ripple carry adder combines multiple full adders to add multi-bit numbers. The carry bit \"ripples\" from one adder to the next, which is simple to implement but can introduce propagation delays.',\r\n            testCases: [\r\n              { inputs: 'a=0000, b=0000, cin=0', expectedOutputs: 'sum=0000, cout=0', explanation: 'Adding zeros gives zero' },\r\n              { inputs: 'a=1010, b=0101, cin=0', expectedOutputs: 'sum=1111, cout=0', explanation: '10 + 5 = 15 (no carry out)' },\r\n              { inputs: 'a=1111, b=0001, cin=0', expectedOutputs: 'sum=0000, cout=1', explanation: '15 + 1 = 16 (rolls over with carry)' },\r\n              { inputs: 'a=1111, b=1111, cin=0', expectedOutputs: 'sum=1110, cout=1', explanation: '15 + 15 = 30 (exceeds 4 bits)' }\r\n            ],\r\n            hints: [\r\n              'Start by designing or reusing a full adder module',\r\n              'Connect four full adders, with the carry output of each going to the carry input of the next',\r\n              'The first full adder takes the cin input, and the last full adder produces the cout output',\r\n              'Remember to use proper bit indices when connecting multi-bit signals'\r\n            ],\r\n            imageUrl: 'https://www.researchgate.net/publication/265755789/figure/fig1/AS:668550417743875@1536402642245/4-bit-Ripple-Carry-Adder.png'\r\n          });\r\n          break;\r\n          \r\n        case 'alu':\r\n          moduleTemplate = `module alu_4bit(\r\n  input [3:0] a, b,\r\n  input [1:0] op,\r\n  output reg [3:0] result,\r\n  output zero\r\n);\r\n  // TODO: Implement a 4-bit ALU with the following operations:\r\n  // op = 00: ADD (a + b)\r\n  // op = 01: SUB (a - b)\r\n  // op = 10: AND (a & b)\r\n  // op = 11: OR (a | b)\r\n  // zero flag should be set when result is 0\r\n  \r\n  // Your code here:\r\n  \r\nendmodule`;\r\n          \r\n          setExerciseData({\r\n            id: 'alu',\r\n            title: 'Designing a 4-bit ALU',\r\n            description: 'Create a 4-bit Arithmetic Logic Unit (ALU) that can perform addition, subtraction, AND, and OR operations.',\r\n            objectives: [\r\n              'Design a multi-functional digital component',\r\n              'Implement operation selection using control signals',\r\n              'Practice using conditional (case) statements in Verilog',\r\n              'Understand zero flag generation'\r\n            ],\r\n            background: 'An ALU is a fundamental digital circuit that performs arithmetic and logical operations. ALUs are a critical component in CPU design, forming the heart of the execution unit.',\r\n            testCases: [\r\n              { inputs: 'a=0101, b=0011, op=00', expectedOutputs: 'result=1000, zero=0', explanation: 'ADD: 5 + 3 = 8' },\r\n              { inputs: 'a=1000, b=0011, op=01', expectedOutputs: 'result=0101, zero=0', explanation: 'SUB: 8 - 3 = 5' },\r\n              { inputs: 'a=1001, b=0011, op=10', expectedOutputs: 'result=0001, zero=0', explanation: 'AND: 1001 & 0011 = 0001' },\r\n              { inputs: 'a=1000, b=0011, op=11', expectedOutputs: 'result=1011, zero=0', explanation: 'OR: 1000 | 0011 = 1011' },\r\n              { inputs: 'a=0011, b=0011, op=01', expectedOutputs: 'result=0000, zero=1', explanation: 'SUB: 3 - 3 = 0 (zero flag set)' }\r\n            ],\r\n            hints: [\r\n              'Use a case statement to implement different operations based on the op input',\r\n              'For subtraction, remember that a - b can be implemented as a + (complement of b) + 1',\r\n              'The zero flag is set when all bits of the result are 0',\r\n              'Use the always block with blocking assignments for combinational logic'\r\n            ],\r\n            imageUrl: 'https://www.allaboutcircuits.com/uploads/articles/an-introduction-to-arithmetic-logic-units-alus-fig2.jpg'\r\n          });\r\n          break;\r\n          \r\n        case 'fsm_traffic':\r\n          moduleTemplate = `module traffic_light_controller(\r\n  input clk,\r\n  input reset,\r\n  input enable,\r\n  output reg [2:0] highway_lights, // R, Y, G\r\n  output reg [2:0] farm_road_lights // R, Y, G\r\n);\r\n  // TODO: Implement a traffic light controller for a highway and farm road intersection\r\n  // The highway normally stays green, while the farm road stays red\r\n  // When enable is high, start the sequence to allow farm road traffic\r\n  // Proper yellow light timing should be included\r\n  // Hint: Define state parameters, create a state register, and use a state machine approach\r\n  \r\n  // Your code here:\r\n  \r\nendmodule`;\r\n          \r\n          setExerciseData({\r\n            id: 'fsm_traffic',\r\n            title: 'Traffic Light Controller FSM',\r\n            description: 'Design a traffic light controller for an intersection between a highway and a farm road using a finite state machine approach.',\r\n            objectives: [\r\n              'Implement a finite state machine (FSM) in Verilog',\r\n              'Practice sequential circuit design',\r\n              'Learn state encoding and transitions',\r\n              'Understand timing sequences in digital control systems'\r\n            ],\r\n            background: 'Traffic light controllers are classical examples of finite state machines. They need to maintain the current state, handle transitions based on inputs, and control outputs according to the current state.',\r\n            testCases: [\r\n              { inputs: 'enable=0 (steady state)', expectedOutputs: 'highway=GREEN, farm=RED', explanation: 'Normal operation with highway traffic flowing' },\r\n              { inputs: 'enable transitions to 1', expectedOutputs: 'Sequence starts: highway→YELLOW→RED, farm→RED→GREEN', explanation: 'Transition sequence initiated' },\r\n              { inputs: 'After timeout with enable=0', expectedOutputs: 'Sequence ends: highway→GREEN, farm→RED', explanation: 'Return to normal operation' }\r\n            ],\r\n            hints: [\r\n              'First, define your states using parameters (e.g., HWY_GREEN, HWY_YELLOW, etc.)',\r\n              'Use a state register to keep track of the current state',\r\n              'Implement two always blocks: one for state transitions and one for output logic',\r\n              'Don\\'t forget to handle the reset condition to initialize the FSM',\r\n              'Consider adding counters for timing the duration of each state'\r\n            ],\r\n            imageUrl: 'https://www.researchgate.net/publication/261209431/figure/fig2/AS:296969038467074@1447808916417/Basic-traffic-light-controller-state-diagram.png'\r\n          });\r\n          break;\r\n          \r\n        default:\r\n          moduleTemplate = '// Select a module from the dropdown to begin';\r\n          setExerciseData(null);\r\n      }\r\n      \r\n      setCode(moduleTemplate);\r\n    };\r\n\r\n    fetchModuleData();\r\n  }, [selectedModule]);\r\n\r\n  const handleTabChange = (_, newValue) => setTabValue(newValue);\r\n\r\n  const handleRunCode = () => {\r\n    setIsCompiling(true);\r\n    setOutput('');\r\n    \r\n    // Simulate compilation and running\r\n    setTimeout(() => {\r\n      if (code.includes('assign sum') && code.includes('assign cout')) {\r\n        // Format output with color codes for terminal display\r\n        setOutput(`\r\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\r\n\r\n\\x1b[1;36mRunning simulation for full_adder module...\\x1b[0m\r\n\r\n\\x1b[1;33mTruth Table Verification:\\x1b[0m\r\n┌─────┬─────┬─────┬─────┬─────┬─────┬─────────────────┐\r\n│ \\x1b[1mTest\\x1b[0m │ \\x1b[1ma\\x1b[0m   │ \\x1b[1mb\\x1b[0m   │ \\x1b[1mcin\\x1b[0m │ \\x1b[1msum\\x1b[0m │ \\x1b[1mcout\\x1b[0m │ \\x1b[1mStatus\\x1b[0m       │\r\n├─────┼─────┼─────┼─────┼─────┼─────┼─────────────────┤\r\n│ 1   │ 0   │ 0   │ 0   │ 0   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 2   │ 0   │ 0   │ 1   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 3   │ 0   │ 1   │ 0   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 4   │ 0   │ 1   │ 1   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 5   │ 1   │ 0   │ 0   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 6   │ 1   │ 0   │ 1   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 7   │ 1   │ 1   │ 0   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 8   │ 1   │ 1   │ 1   │ 1   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n└─────┴─────┴─────┴─────┴─────┴─────┴─────────────────┘\r\n\r\n\\x1b[1;33mWaveform Simulation:\\x1b[0m\r\nTime  a b cin | sum cout\r\n----------------+----------\r\n0ns:  0 0 0   |  0   0\r\n10ns: 0 0 1   |  1   0\r\n20ns: 0 1 0   |  1   0\r\n30ns: 0 1 1   |  0   1\r\n40ns: 1 0 0   |  1   0\r\n50ns: 1 0 1   |  0   1\r\n60ns: 1 1 0   |  0   1\r\n70ns: 1 1 1   |  1   1\r\n\r\n\\x1b[1;32mSummary: 8/8 test cases passed.\\x1b[0m\r\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your full adder implementation works correctly.\r\n\r\n\\x1b[33mPerformance Analysis:\\x1b[0m\r\n• Gate Count: Approximately 5 gates (2 XOR, 2 AND, 1 OR)\r\n• Critical Path: Input to Sum output through 2 XOR gates\r\n• Additional Optimizations: Using intermediate signals improves readability\r\n\r\n\\x1b[36mDesign Feedback:\\x1b[0m\r\n✓ Good use of intermediate signals for readability\r\n✓ Properly declared wire and port types\r\n✓ Clean implementation of the full adder equations\r\n`);\r\n        setNotification({\r\n          open: true,\r\n          message: 'All tests passed! Great job implementing the full adder!',\r\n          severity: 'success'\r\n        });\r\n      } else if (code.includes('module full_adder') && code.includes('endmodule')) {\r\n        setOutput(`\r\n\\x1b[1;33mCompilation Warning:\\x1b[0m\r\nYour module compiles, but appears incomplete.\r\n\r\n\\x1b[1;31mRuntime Errors:\\x1b[0m\r\nThe simulation indicates that your implementation does not correctly produce the expected sum and cout outputs.\r\n\r\n\\x1b[1;33mVerification Results:\\x1b[0m\r\n┌─────┬─────┬─────┬─────┬──────┬──────┬─────────────────┐\r\n│ \\x1b[1mTest\\x1b[0m │ \\x1b[1ma\\x1b[0m   │ \\x1b[1mb\\x1b[0m   │ \\x1b[1mcin\\x1b[0m │ \\x1b[1msum\\x1b[0m  │ \\x1b[1mcout\\x1b[0m │ \\x1b[1mStatus\\x1b[0m       │\r\n├─────┼─────┼─────┼─────┼──────┼──────┼─────────────────┤\r\n│ 1   │ 0   │ 0   │ 0   │ x    │ x    │ \\x1b[31m✗ FAILED\\x1b[0m      │\r\n│ 2   │ 0   │ 0   │ 1   │ x    │ x    │ \\x1b[31m✗ FAILED\\x1b[0m      │\r\n│ 3   │ 0   │ 1   │ 0   │ x    │ x    │ \\x1b[31m✗ FAILED\\x1b[0m      │\r\n└─────┴─────┴─────┴─────┴──────┴──────┴─────────────────┘\r\nFurther tests skipped due to errors.\r\n\r\n\\x1b[1;36mTroubleshooting Suggestions:\\x1b[0m\r\n1. Make sure you've implemented the assign statements for sum and cout\r\n2. Check if you've correctly defined intermediate signals if needed\r\n3. Verify your logic equations: sum = a ^ b ^ cin and cout = (a & b) | (cin & (a ^ b))\r\n4. Make sure all variables are properly connected\r\n\r\n\\x1b[33mHint:\\x1b[0m Review the boolean equations for a full adder and ensure your implementation follows them.\r\n`);\r\n        setNotification({\r\n          open: true,\r\n          message: 'Your code compiles but doesn\\'t correctly implement the full adder functionality.',\r\n          severity: 'warning'\r\n        });\r\n      } else {\r\n        setOutput(`\r\n\\x1b[1;31mCompilation Error:\\x1b[0m\r\nError: Incomplete or incorrect module implementation.\r\n\r\n\\x1b[33mExpected structure:\\x1b[0m\r\nmodule full_adder(\r\n  input wire a, b, cin,\r\n  output wire sum, cout\r\n);\r\n  // Implementation here with proper assignments for sum and cout\r\nendmodule\r\n\r\n\\x1b[36mSpecific Issues:\\x1b[0m\r\n- ${!code.includes('module full_adder') ? 'Missing or incorrect module declaration' : 'Module declaration found'} \r\n- ${!code.includes('input') ? 'Missing input port declarations' : 'Input ports found'}\r\n- ${!code.includes('output') ? 'Missing output port declarations' : 'Output ports found'}\r\n- ${!code.includes('assign') ? 'Missing assign statements for outputs' : 'Assign statements found but may be incomplete'}\r\n- ${!code.includes('endmodule') ? 'Missing endmodule statement' : 'Endmodule statement found'}\r\n\r\n\\x1b[33mRemember:\\x1b[0m\r\nA full adder needs to implement the following logic:\r\n- sum = a XOR b XOR cin\r\n- cout = (a AND b) OR (cin AND (a XOR b))\r\n\r\nPlease implement the full adder logic before running the code again.\r\n`);\r\n        setNotification({\r\n          open: true,\r\n          message: 'Compilation failed. Please check your code and fix the issues.',\r\n          severity: 'error'\r\n        });\r\n      }\r\n      \r\n      setIsCompiling(false);\r\n    }, 1500);\r\n  };\r\n\r\n  const handleSaveCode = () => {\r\n    setNotification({\r\n      open: true,\r\n      message: 'Code saved successfully!',\r\n      severity: 'success'\r\n    });\r\n  };\r\n\r\n  const handleCloseNotification = () => {\r\n    setNotification({ ...notification, open: false });\r\n  };\r\n\r\n  const handleShowHint = () => {\r\n    setTabValue(2); // Switch to the Hints tab\r\n  };\r\n  \r\n  const handleCopyCode = () => {\r\n    navigator.clipboard.writeText(code);\r\n    setNotification({\r\n      open: true,\r\n      message: 'Code copied to clipboard!',\r\n      severity: 'info'\r\n    });\r\n  };\r\n  \r\n  const handleDownloadCode = () => {\r\n    const blob = new Blob([code], { type: 'text/plain' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `${selectedModule}.v`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n  \r\n  // More robust syntax verification\r\n  const verifySyntax = (code) => {\r\n    const errors = [];\r\n    \r\n    // Check for basic syntax elements\r\n    if (!code.includes('module')) errors.push('Missing module declaration');\r\n    if (!code.includes('endmodule')) errors.push('Missing endmodule statement');\r\n    \r\n    // Module-specific checks\r\n    if (selectedModule === 'full_adder') {\r\n      if (!code.includes('input') || !code.includes('a') || !code.includes('b') || !code.includes('cin')) \r\n        errors.push('Missing input port declarations (a, b, cin)');\r\n      if (!code.includes('output') || !code.includes('sum') || !code.includes('cout'))\r\n        errors.push('Missing output port declarations (sum, cout)');\r\n      if (!code.includes('assign sum') && !code.includes('assign sum ='))\r\n        errors.push('Missing sum output assignment');\r\n      if (!code.includes('assign cout') && !code.includes('assign cout ='))\r\n        errors.push('Missing cout output assignment');\r\n    } else if (selectedModule === 'ripple_carry_adder') {\r\n      if (!code.includes('input') || !code.includes('[3:0] a') || !code.includes('[3:0] b'))\r\n        errors.push('Missing 4-bit input port declarations');\r\n      if (!code.includes('output') || !code.includes('[3:0] sum') || !code.includes('cout'))\r\n        errors.push('Missing output port declarations');\r\n    }\r\n    \r\n    return errors;\r\n  };\r\n\r\n  return (\r\n    <Box className=\"container page-container\">\r\n      {/* Page Header */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 4, flexWrap: 'wrap', gap: 2 }}>\r\n        <Box>\r\n          <Button \r\n            component={Link} \r\n            to=\"/modules\" \r\n            startIcon={<ArrowBack />} \r\n            sx={{ mb: 2 }}\r\n          >\r\n            Back to Modules\r\n          </Button>\r\n          <Typography variant=\"h4\" component=\"h1\" sx={{ fontWeight: 'bold', color: 'primary.main' }}>\r\n            VeriGeek Code Editor\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"text.secondary\">\r\n            Write, test, and simulate Verilog HDL code in your browser\r\n          </Typography>\r\n        </Box>\r\n        \r\n        {/* Module Selector */}\r\n        <Box sx={{ minWidth: 300 }}>\r\n          <FormControl fullWidth variant=\"outlined\" size=\"small\">\r\n            <InputLabel id=\"module-selector-label\">Practice Module</InputLabel>\r\n            <Select\r\n              labelId=\"module-selector-label\"\r\n              id=\"module-selector\"\r\n              value={selectedModule}\r\n              onChange={handleModuleChange}\r\n              label=\"Practice Module\"\r\n            >\r\n              {practiceModules.map(module => (\r\n                <MenuItem key={module.id} value={module.id}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', justifyContent: 'space-between' }}>\r\n                    <Typography>{module.name}</Typography>\r\n                    <Box>\r\n                      <Chip\r\n                        label={module.level}\r\n                        size=\"small\"\r\n                        sx={{ \r\n                          ml: 1, \r\n                          bgcolor: module.level === 'Beginner' ? '#e3f2fd' : \r\n                                  module.level === 'Intermediate' ? '#fff8e1' : '#fbe9e7',\r\n                          color: module.level === 'Beginner' ? '#0277bd' : \r\n                                module.level === 'Intermediate' ? '#ff8f00' : '#e64a19',\r\n                          fontSize: '0.75rem'\r\n                        }}\r\n                      />\r\n                    </Box>\r\n                  </Box>\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n      </Box>\r\n      \r\n      {/* Exercise Info */}\r\n      {exerciseData && (\r\n        <Paper elevation={2} sx={{ p: 3, mb: 4, borderRadius: 2 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>\r\n            <Box>\r\n              <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 'bold', color: 'primary.main' }}>\r\n                {exerciseData.title}\r\n              </Typography>\r\n              <Typography paragraph sx={{ maxWidth: '800px' }}>\r\n                {exerciseData.description}\r\n              </Typography>\r\n            </Box>\r\n            <Box sx={{ display: 'flex', gap: 1 }}>\r\n              <Chip \r\n                icon={<Info fontSize=\"small\" />} \r\n                label={`ID: ${exerciseData.id}`} \r\n                variant=\"outlined\" \r\n                size=\"small\" \r\n              />\r\n            </Box>\r\n          </Box>\r\n          \r\n          {/* Learning Objectives */}\r\n          <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'bold', mt: 3 }}>\r\n            Learning Objectives:\r\n          </Typography>\r\n          <List dense disablePadding sx={{ mb: 2 }}>\r\n            {exerciseData.objectives.map((objective, index) => (\r\n              <ListItem key={index} sx={{ py: 0.5 }}>\r\n                <ListItemIcon sx={{ minWidth: 36 }}>\r\n                  <Check color=\"primary\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary={objective} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Paper>\r\n      )}\r\n      \r\n      {/* Editor and Output */}\r\n      <Grid container spacing={3}>\r\n        {/* Editor Section */}\r\n        <Grid item xs={12} md={7}>\r\n          <Paper elevation={3} sx={{ height: '100%', display: 'flex', flexDirection: 'column', borderRadius: 2 }}>\r\n            <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider', bgcolor: '#f5f5f5', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n              <Typography variant=\"h6\" sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <Code sx={{ mr: 1 }} />\r\n                Verilog Editor\r\n              </Typography>\r\n              <Typography variant=\"caption\" color=\"text.secondary\">\r\n                Write your solution here\r\n              </Typography>\r\n            </Box>\r\n            <Box sx={{ flexGrow: 1, p: 0, bgcolor: '#272822', minHeight: '500px' }}>\r\n              <textarea\r\n                value={code}\r\n                onChange={(e) => setCode(e.target.value)}\r\n                style={{\r\n                  width: '100%',\r\n                  height: '100%',\r\n                  minHeight: '500px',\r\n                  fontFamily: 'Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace',\r\n                  fontSize: '14px',\r\n                  padding: '16px',\r\n                  border: 'none',\r\n                  borderRadius: 0,\r\n                  resize: 'none',\r\n                  backgroundColor: '#272822',\r\n                  color: '#f8f8f2',\r\n                  lineHeight: '1.5',\r\n                  outline: 'none'\r\n                }}\r\n                spellCheck=\"false\"\r\n                placeholder=\"// Write your Verilog code here\"\r\n              />\r\n            </Box>\r\n            <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider', display: 'flex', gap: 1, bgcolor: '#f5f5f5' }}>\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"primary\" \r\n                startIcon={<PlayArrow />}\r\n                onClick={handleRunCode}\r\n                disabled={isCompiling}\r\n                size=\"large\"\r\n              >\r\n                {isCompiling ? 'Running...' : 'Run Code'}\r\n              </Button>\r\n              <Button \r\n                variant=\"outlined\" \r\n                startIcon={<Save />}\r\n                onClick={handleSaveCode}\r\n                size=\"large\"\r\n              >\r\n                Save\r\n              </Button>\r\n              <Button \r\n                variant=\"outlined\" \r\n                color=\"secondary\"\r\n                startIcon={<LightbulbOutlined />}\r\n                onClick={handleShowHint}\r\n                sx={{ ml: 'auto' }}\r\n                size=\"large\"\r\n              >\r\n                Hint\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Output Section */}\r\n        <Grid item xs={12} md={5}>\r\n          <Paper elevation={3} sx={{ display: 'flex', flexDirection: 'column', height: '100%', borderRadius: 2 }}>\r\n            <Tabs \r\n              value={tabValue} \r\n              onChange={handleTabChange}\r\n              sx={{ \r\n                borderBottom: 1, \r\n                borderColor: 'divider',\r\n                bgcolor: '#f5f5f5'\r\n              }}\r\n            >\r\n              <Tab label=\"Output\" icon={<Assessment fontSize=\"small\" />} iconPosition=\"start\" />\r\n              <Tab label=\"Console\" icon={<Terminal fontSize=\"small\" />} iconPosition=\"start\" />\r\n              <Tab label=\"Hints\" icon={<LightbulbOutlined fontSize=\"small\" />} iconPosition=\"start\" />\r\n            </Tabs>\r\n            \r\n            {/* Output Tab */}\r\n            {tabValue === 0 && (\r\n              <Box \r\n                sx={{ \r\n                  flexGrow: 1, \r\n                  p: 2, \r\n                  fontFamily: 'Consolas, Monaco, monospace', \r\n                  fontSize: '14px',\r\n                  bgcolor: '#2d2d2d',\r\n                  color: '#e6e6e6',\r\n                  overflowY: 'auto',\r\n                  whiteSpace: 'pre-wrap',\r\n                  minHeight: '500px'\r\n                }}\r\n              >\r\n                {isCompiling ? \r\n                  <Box sx={{ p: 2 }}>\r\n                    <LinearProgress color=\"primary\" sx={{ mb: 2 }} />\r\n                    <Typography variant=\"body2\" sx={{ color: '#a6e22e' }}>\r\n                      Compiling and running your code...\r\n                    </Typography>\r\n                  </Box> : \r\n                  (output ? \r\n                    <Typography component=\"pre\" sx={{ margin: 0, fontFamily: 'inherit', fontSize: 'inherit' }}>\r\n                      {output}\r\n                    </Typography> : \r\n                    <Typography variant=\"body2\" sx={{ color: '#75715e', fontStyle: 'italic' }}>\r\n                      // Run your code to see the output here.\r\n                      // Make sure you've implemented all the required functionality.\r\n                    </Typography>\r\n                  )\r\n                }\r\n              </Box>\r\n            )}\r\n            \r\n            {/* Console Tab */}\r\n            {tabValue === 1 && (\r\n              <Box \r\n                sx={{ \r\n                  flexGrow: 1, \r\n                  p: 2, \r\n                  fontFamily: 'Consolas, Monaco, monospace', \r\n                  fontSize: '14px',\r\n                  bgcolor: '#2d2d2d',\r\n                  color: '#e6e6e6',\r\n                  overflowY: 'auto',\r\n                  whiteSpace: 'pre-wrap',\r\n                  minHeight: '500px'\r\n                }}\r\n              >\r\n                <Typography variant=\"body2\" sx={{ color: '#75715e', fontStyle: 'italic' }}>\r\n                  // Verilog compiler messages will appear here.\r\n                  // This includes warnings and errors from your code.\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n            \r\n            {/* Hints Tab */}\r\n            {tabValue === 2 && (\r\n              <Box \r\n                sx={{ \r\n                  flexGrow: 1, \r\n                  p: 3, \r\n                  bgcolor: '#fffde7',\r\n                  overflowY: 'auto',\r\n                  minHeight: '500px'\r\n                }}\r\n              >\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Helpful Hints\r\n                </Typography>\r\n                <Typography variant=\"body2\" paragraph>\r\n                  If you're stuck, these hints may guide you in the right direction without giving away the full solution.\r\n                </Typography>\r\n                <List>\r\n                  {exerciseData?.hints.map((hint, index) => (\r\n                    <ListItem key={index} alignItems=\"flex-start\" sx={{ px: 0 }}>\r\n                      <ListItemIcon sx={{ minWidth: 36, mt: 0.5 }}>\r\n                        <LightbulbOutlined color=\"warning\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText \r\n                        primary={`Hint ${index + 1}`} \r\n                        secondary={hint}\r\n                        primaryTypographyProps={{ fontWeight: 'bold' }}\r\n                        secondaryTypographyProps={{ variant: 'body1' }}\r\n                      />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n                \r\n                <Box sx={{ mt: 3, p: 2, bgcolor: 'rgba(0, 0, 0, 0.03)', borderRadius: 2 }}>\r\n                  <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'bold' }}>\r\n                    Full Adder Logic:\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" paragraph>\r\n                    A full adder adds three bits (a, b, and cin) and produces a sum bit and a carry bit.\r\n                  </Typography>\r\n                  <Box component=\"img\" src={exerciseData?.imageUrl} \r\n                       alt=\"Full Adder Logic Diagram\" \r\n                       sx={{ width: '100%', borderRadius: 1, mb: 2 }} />\r\n                  <Typography variant=\"body2\">\r\n                    The boolean equations for a full adder are:\r\n                  </Typography>\r\n                  <Box sx={{ \r\n                    bgcolor: 'white', \r\n                    p: 2, \r\n                    borderRadius: 1, \r\n                    fontFamily: 'math', \r\n                    fontSize: '1rem',\r\n                    textAlign: 'center',\r\n                    mt: 1\r\n                  }}>\r\n                    <Box>sum = a ⊕ b ⊕ cin</Box>\r\n                    <Box>cout = (a·b) + cin·(a⊕b)</Box>\r\n                  </Box>\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Notification */}\r\n      <Snackbar \r\n        open={notification.open} \r\n        autoHideDuration={6000} \r\n        onClose={handleCloseNotification}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert \r\n          onClose={handleCloseNotification} \r\n          severity={notification.severity} \r\n          sx={{ width: '100%' }}\r\n        >\r\n          {notification.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CodeEditor; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}