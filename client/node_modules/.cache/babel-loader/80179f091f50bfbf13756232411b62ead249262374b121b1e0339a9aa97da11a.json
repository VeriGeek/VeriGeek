{"ast":null,"code":"/**\r\n * Verilog Fundamentals Module\r\n * \r\n * This module covers the basics of Verilog HDL and digital design.\r\n */\n\nexport const verilogFundamentals = {\n  id: 1,\n  title: \"Verilog Fundamentals\",\n  description: \"Master the basics of Verilog HDL and start your journey in digital design\",\n  level: \"Beginner\",\n  duration: \"4 weeks\",\n  image: \"https://www.fpgakey.com/upload/2020/04/29/20200429102215-b170db2c.png\",\n  instructor: {\n    name: \"Dr. Sarah Johnson\",\n    title: \"Professor of Electrical Engineering\",\n    bio: \"Dr. Johnson has over 12 years of experience in FPGA design and digital systems. She has led numerous industry projects and published extensively in the field of hardware design languages and methodologies.\",\n    avatar: \"https://randomuser.me/api/portraits/women/25.jpg\"\n  },\n  overview: `\n    <p>Welcome to Verilog Fundamentals! This comprehensive course provides a solid introduction to Verilog Hardware Description Language (HDL), which is widely used in the industry for digital design and verification.</p>\n    \n    <p>Whether you aim to design FPGAs, ASICs, or simply understand digital hardware better, this module will give you the foundation you need. Starting with basic syntax and concepts, you'll quickly progress to designing both combinational and sequential circuits.</p>\n    \n    <p>You'll learn how to create reusable modules, write effective testbenches for verification, and implement complex designs like finite state machines. Through hands-on exercises and practical examples, you'll gain experience in translating design requirements into working Verilog code.</p>\n    \n    <p>By the end of this module, you'll be able to design, implement, and verify digital circuits using Verilog HDL, preparing you for more advanced topics in digital design.</p>\n  `,\n  prerequisites: [\"Basic understanding of digital logic\", \"Familiarity with binary number systems\", \"No prior HDL experience required\"],\n  skills: [\"Verilog Syntax\", \"Combinational Logic Design\", \"Sequential Logic Design\", \"Testbench Development\", \"Finite State Machines\", \"RTL Design\", \"Hardware Verification\", \"Module Instantiation\", \"Behavioral Modeling\", \"Structural Modeling\"],\n  chapters: [{\n    id: 1,\n    title: \"Introduction to Hardware Description Languages\",\n    description: \"Learn the fundamentals of hardware description languages and their role in digital design\",\n    estimatedTime: \"3 hours\",\n    sections: [{\n      id: \"1.1\",\n      title: \"What is a Hardware Description Language?\",\n      content: `\n            <p>A Hardware Description Language (HDL) is a specialized programming language used to describe the structure and behavior of electronic circuits, particularly digital logic circuits. Unlike traditional programming languages that are used to create software applications, HDLs are used to describe hardware and are the foundation of modern digital circuit design.</p>\n            \n            <h4>Key Characteristics of HDLs</h4>\n            <ul>\n              <li><strong>Hardware Modeling</strong>: HDLs allow designers to model hardware components and their connections.</li>\n              <li><strong>Concurrency</strong>: HDLs support describing operations that occur simultaneously, reflecting the parallel nature of hardware.</li>\n              <li><strong>Timing</strong>: They provide mechanisms to describe timing constraints and synchronization.</li>\n              <li><strong>Hierarchy</strong>: HDLs support hierarchical design, enabling the creation of complex systems from simpler components.</li>\n            </ul>\n            \n            <h4>Popular Hardware Description Languages</h4>\n            <p>Several HDLs have been developed over the years, with the most prominent being:</p>\n            <ul>\n              <li><strong>Verilog</strong>: Created in the 1980s, Verilog is known for its C-like syntax and is widely used in industry.</li>\n              <li><strong>VHDL</strong>: Very High-Speed Integrated Circuit Hardware Description Language, developed under the Department of Defense's VHSIC program, is more verbose and Ada-like.</li>\n              <li><strong>SystemVerilog</strong>: An extension of Verilog with features for verification, system-level design, and high-level synthesis.</li>\n              <li><strong>Chisel</strong>: A more recent HDL embedded in Scala that helps generate highly parameterized hardware designs.</li>\n            </ul>\n            \n            <p>In this module, we'll focus on Verilog, one of the most widely used HDLs in the industry.</p>\n          `\n    }, {\n      id: \"1.2\",\n      title: \"The Digital Design Flow\",\n      content: `\n            <p>The digital design flow is the process of taking a design concept and transforming it into physical hardware. Understanding this flow is essential for any hardware designer.</p>\n            \n            <h4>Stages of the Digital Design Flow</h4>\n            <ol>\n              <li><strong>Specification</strong>: Define what the system should do.</li>\n              <li><strong>Architecture Design</strong>: High-level design of system components and their interactions.</li>\n              <li><strong>Implementation</strong>: Writing HDL code to describe the design.</li>\n              <li><strong>Simulation</strong>: Verifying the functionality through simulation.</li>\n              <li><strong>Synthesis</strong>: Converting the HDL description into a gate-level representation.</li>\n              <li><strong>Implementation (Place and Route)</strong>: Mapping the design to the target technology.</li>\n              <li><strong>Verification</strong>: Ensure the design meets specifications.</li>\n              <li><strong>Manufacturing</strong>: Fabricating the physical chip.</li>\n            </ol>\n            \n            <p>Verilog plays a critical role in the implementation and simulation stages of this flow.</p>\n            \n            <h4>Tools in the Digital Design Flow</h4>\n            <p>Several tools are used throughout the design flow:</p>\n            <ul>\n              <li><strong>Text Editors/IDEs</strong>: For writing HDL code (e.g., VSCode with Verilog extensions).</li>\n              <li><strong>Simulators</strong>: To test the behavior of the design (e.g., ModelSim, VCS, Icarus Verilog).</li>\n              <li><strong>Synthesis Tools</strong>: To convert HDL to gate-level designs (e.g., Synopsys Design Compiler, Xilinx Vivado).</li>\n              <li><strong>Place and Route Tools</strong>: To map the design to the target technology (often part of FPGA vendor tools).</li>\n              <li><strong>Formal Verification Tools</strong>: To mathematically prove design correctness.</li>\n            </ul>\n            \n            <p>Throughout this module, we'll use simulators to verify our Verilog designs.</p>\n          `\n    }, {\n      id: \"1.3\",\n      title: \"Introduction to Verilog\",\n      content: `\n            <p>Verilog is one of the most widely used hardware description languages in the industry. It was created in the mid-1980s by Phil Moorby at Gateway Design Automation, which was later acquired by Cadence Design Systems. In 1995, Verilog became IEEE Standard 1364.</p>\n            \n            <h4>Key Features of Verilog</h4>\n            <ul>\n              <li><strong>C-like Syntax</strong>: Familiar to many programmers, making it relatively easy to learn.</li>\n              <li><strong>Concurrency</strong>: Supports describing parallel operations.</li>\n              <li><strong>Multiple Abstraction Levels</strong>: From high-level behavioral descriptions to low-level structural representations.</li>\n              <li><strong>Timing Control</strong>: Mechanisms for specifying timing constraints and delays.</li>\n              <li><strong>Modularity</strong>: Support for hierarchical design through modules.</li>\n              <li><strong>Testbench Capabilities</strong>: Built-in features for verification.</li>\n            </ul>\n            \n            <h4>Verilog vs. Traditional Programming Languages</h4>\n            <p>While Verilog's syntax may look similar to C, it's important to understand the fundamental differences:</p>\n            <ul>\n              <li><strong>Purpose</strong>: Verilog describes hardware, not software algorithms.</li>\n              <li><strong>Execution</strong>: Verilog is not \"executed\" sequentially like C; it represents concurrent hardware operations.</li>\n              <li><strong>Time</strong>: Verilog has explicit constructs for timing and synchronization.</li>\n              <li><strong>Compilation</strong>: Verilog is synthesized into hardware, not compiled into machine code.</li>\n            </ul>\n            \n            <h4>Modeling Styles in Verilog</h4>\n            <p>Verilog supports different modeling styles for describing hardware:</p>\n            <ul>\n              <li><strong>Behavioral Modeling</strong>: Describes what the circuit does without specifying the structure.</li>\n              <li><strong>Dataflow Modeling</strong>: Describes how data flows through the circuit using continuous assignments.</li>\n              <li><strong>Structural Modeling</strong>: Describes the circuit in terms of its components and their connections.</li>\n              <li><strong>Mixed Modeling</strong>: Combines different modeling styles as appropriate.</li>\n            </ul>\n            \n            <p>We'll explore each of these modeling styles in detail throughout this module.</p>\n          `\n    }, {\n      id: \"1.4\",\n      title: \"Setting Up Your Development Environment\",\n      content: `\n            <p>Before we start writing Verilog code, we need to set up a development environment. This section covers the tools you'll need and how to configure them.</p>\n            \n            <h4>Essential Tools</h4>\n            <ol>\n              <li><strong>Text Editor or IDE</strong>: Visual Studio Code with Verilog extensions is recommended for beginners.</li>\n              <li><strong>Verilog Simulator</strong>: We'll use the open-source Icarus Verilog and GTKWave for this module.</li>\n            </ol>\n            \n            <h4>Setting Up Icarus Verilog</h4>\n            <p>Icarus Verilog is a free, open-source Verilog simulation and synthesis tool.</p>\n            \n            <p><strong>Installation:</strong></p>\n            <ul>\n              <li>Windows: Download the installer from <a href=\"http://bleyer.org/icarus/\" target=\"_blank\">http://bleyer.org/icarus/</a></li>\n              <li>macOS: <code>brew install icarus-verilog</code></li>\n              <li>Linux: <code>sudo apt-get install iverilog</code> (Ubuntu/Debian) or equivalent for your distribution</li>\n            </ul>\n            \n            <h4>Setting Up GTKWave</h4>\n            <p>GTKWave is a waveform viewer that we'll use to visualize simulation results.</p>\n            \n            <p><strong>Installation:</strong></p>\n            <ul>\n              <li>Windows: Included with the Icarus Verilog installer</li>\n              <li>macOS: <code>brew install gtkwave</code></li>\n              <li>Linux: <code>sudo apt-get install gtkwave</code> (Ubuntu/Debian) or equivalent for your distribution</li>\n            </ul>\n            \n            <h4>Setting Up VS Code for Verilog</h4>\n            <ol>\n              <li>Install Visual Studio Code from <a href=\"https://code.visualstudio.com/\" target=\"_blank\">https://code.visualstudio.com/</a></li>\n              <li>Open VS Code and go to the Extensions view (Ctrl+Shift+X or Cmd+Shift+X)</li>\n              <li>Search for \"Verilog\" and install the \"Verilog-HDL/SystemVerilog/Bluespec SystemVerilog\" extension by mshr-h</li>\n              <li>Optionally, install \"Verilog Formatting\" for code formatting</li>\n            </ol>\n            \n            <p>With these tools set up, you're ready to start writing and simulating Verilog code!</p>\n          `\n    }],\n    examples: [{\n      id: \"example_1_1\",\n      title: \"Simple Verilog Module\",\n      description: \"A basic module implementing a 2-input AND gate\",\n      code: `// Simple AND gate module\nmodule and_gate(\n  input wire a,\n  input wire b,\n  output wire y\n);\n  \n  // Behavioral description using continuous assignment\n  assign y = a & b;\n  \nendmodule`,\n      explanation: \"This example shows a simple Verilog module that implements a 2-input AND gate. The module has two input ports (a and b) and one output port (y). The behavior is described using a continuous assignment statement that sets the output y to the logical AND of inputs a and b.\"\n    }, {\n      id: \"example_1_2\",\n      title: \"Basic Testbench\",\n      description: \"A simple testbench to verify the AND gate module\",\n      code: `// Testbench for AND gate\nmodule and_gate_tb;\n  \n  // Declare testbench signals\n  reg a, b;      // Inputs are reg type in testbench\n  wire y;        // Output is wire type\n  \n  // Instantiate the module under test\n  and_gate uut (\n    .a(a),\n    .b(b),\n    .y(y)\n  );\n  \n  // Stimulus generation\n  initial begin\n    // Display header for simulation output\n    $display(\"a b | y\");\n    $display(\"---+--\");\n    \n    // Test all input combinations\n    a = 0; b = 0;\n    #10; // Wait 10 time units\n    $display(\"%b %b | %b\", a, b, y);\n    \n    a = 0; b = 1;\n    #10;\n    $display(\"%b %b | %b\", a, b, y);\n    \n    a = 1; b = 0;\n    #10;\n    $display(\"%b %b | %b\", a, b, y);\n    \n    a = 1; b = 1;\n    #10;\n    $display(\"%b %b | %b\", a, b, y);\n    \n    // End simulation\n    $finish;\n  end\n  \nendmodule`,\n      explanation: \"This testbench instantiates the and_gate module and applies all possible input combinations to verify its functionality. The $display system task is used to print the input and output values, creating a truth table. The #10 delay statements ensure that each input combination is stable before reading the output.\"\n    }],\n    videos: [{\n      id: \"video_1_1\",\n      title: \"Introduction to Verilog and HDLs\",\n      description: \"A comprehensive introduction to Hardware Description Languages and Verilog\",\n      url: \"https://www.youtube.com/watch?v=PJGvZSlsLKs\",\n      thumbnail: \"https://i.ytimg.com/vi/PJGvZSlsLKs/hqdefault.jpg\",\n      duration: \"13:35\"\n    }, {\n      id: \"video_1_2\",\n      title: \"Verilog Development Environment Setup\",\n      description: \"How to set up Icarus Verilog and GTKWave for Verilog development\",\n      url: \"https://www.youtube.com/watch?v=VrPvgKPhUk0\",\n      thumbnail: \"https://i.ytimg.com/vi/VrPvgKPhUk0/hqdefault.jpg\",\n      duration: \"15:22\"\n    }],\n    quiz: {\n      id: \"quiz_1\",\n      title: \"Introduction to HDLs Quiz\",\n      description: \"Test your understanding of HDLs and Verilog basics\",\n      questions: [{\n        id: \"q1_1\",\n        question: \"What is the primary purpose of a Hardware Description Language?\",\n        options: [{\n          id: \"a\",\n          text: \"To write software applications\"\n        }, {\n          id: \"b\",\n          text: \"To describe the structure and behavior of electronic circuits\"\n        }, {\n          id: \"c\",\n          text: \"To create operating systems\"\n        }, {\n          id: \"d\",\n          text: \"To program microcontrollers\"\n        }],\n        correctAnswer: \"b\",\n        explanation: \"Hardware Description Languages (HDLs) are specialized languages designed to describe the structure and behavior of electronic circuits, particularly digital logic circuits.\"\n      }, {\n        id: \"q1_2\",\n        question: \"Which of the following is NOT a key characteristic of HDLs?\",\n        options: [{\n          id: \"a\",\n          text: \"Support for concurrency\"\n        }, {\n          id: \"b\",\n          text: \"Ability to describe timing constraints\"\n        }, {\n          id: \"c\",\n          text: \"Sequential execution only\"\n        }, {\n          id: \"d\",\n          text: \"Hierarchical design support\"\n        }],\n        correctAnswer: \"c\",\n        explanation: \"HDLs are designed to model hardware which operates in parallel. They support concurrency, not just sequential execution, which is a key difference from traditional programming languages.\"\n      }, {\n        id: \"q1_3\",\n        question: \"When was Verilog first created?\",\n        options: [{\n          id: \"a\",\n          text: \"1970s\"\n        }, {\n          id: \"b\",\n          text: \"1980s\"\n        }, {\n          id: \"c\",\n          text: \"1990s\"\n        }, {\n          id: \"d\",\n          text: \"2000s\"\n        }],\n        correctAnswer: \"b\",\n        explanation: \"Verilog was created in the mid-1980s by Phil Moorby at Gateway Design Automation, which was later acquired by Cadence Design Systems.\"\n      }, {\n        id: \"q1_4\",\n        question: \"What is the purpose of a Verilog simulator?\",\n        options: [{\n          id: \"a\",\n          text: \"To convert Verilog code into physical hardware\"\n        }, {\n          id: \"b\",\n          text: \"To check the syntax of Verilog code\"\n        }, {\n          id: \"c\",\n          text: \"To test the behavior of a design without physical hardware\"\n        }, {\n          id: \"d\",\n          text: \"To optimize the design for specific hardware\"\n        }],\n        correctAnswer: \"c\",\n        explanation: \"A Verilog simulator allows designers to test the behavior of their design in a virtual environment before implementing it in physical hardware.\"\n      }, {\n        id: \"q1_5\",\n        question: \"Which modeling style in Verilog describes what the circuit does without specifying the structure?\",\n        options: [{\n          id: \"a\",\n          text: \"Structural modeling\"\n        }, {\n          id: \"b\",\n          text: \"Dataflow modeling\"\n        }, {\n          id: \"c\",\n          text: \"Behavioral modeling\"\n        }, {\n          id: \"d\",\n          text: \"Physical modeling\"\n        }],\n        correctAnswer: \"c\",\n        explanation: \"Behavioral modeling describes what the circuit does (its behavior) without detailing the structure or implementation details.\"\n      }]\n    }\n  }],\n  // Additional chapters would be defined here\n\n  resources: [{\n    id: \"resource_1\",\n    title: \"IEEE Standard 1364-2005\",\n    description: \"The official IEEE standard for Verilog HDL\",\n    type: \"Standard\",\n    url: \"https://ieeexplore.ieee.org/document/1620780\",\n    author: \"IEEE\"\n  }, {\n    id: \"resource_2\",\n    title: \"Verilog HDL: A Guide to Digital Design and Synthesis\",\n    description: \"Comprehensive book on Verilog HDL by Samir Palnitkar\",\n    type: \"Book\",\n    author: \"Samir Palnitkar\",\n    url: \"https://www.amazon.com/Verilog-HDL-Synthesis-Samir-Palnitkar/dp/0134516753\"\n  }, {\n    id: \"resource_3\",\n    title: \"HDLBits\",\n    description: \"Online platform for practicing Verilog problems\",\n    type: \"Website\",\n    url: \"https://hdlbits.01xz.net/\",\n    author: \"HDLBits\"\n  }, {\n    id: \"resource_4\",\n    title: \"Icarus Verilog\",\n    description: \"Open-source Verilog simulation and synthesis tool\",\n    type: \"Tool\",\n    url: \"http://iverilog.icarus.com/\",\n    author: \"Stephen Williams\"\n  }],\n  relatedModules: [{\n    id: 2,\n    title: \"Sequential Circuit Design\",\n    description: \"Learn the principles of designing sequential logic circuits using Verilog\",\n    level: \"Intermediate\"\n  }, {\n    id: 3,\n    title: \"Advanced Testbench Techniques\",\n    description: \"Master comprehensive verification strategies for complex digital designs\",\n    level: \"Intermediate\"\n  }, {\n    id: 6,\n    title: \"FPGA Implementation Techniques\",\n    description: \"Learn practical techniques for efficient FPGA implementation\",\n    level: \"Intermediate\"\n  }]\n};","map":{"version":3,"names":["verilogFundamentals","id","title","description","level","duration","image","instructor","name","bio","avatar","overview","prerequisites","skills","chapters","estimatedTime","sections","content","examples","code","explanation","videos","url","thumbnail","quiz","questions","question","options","text","correctAnswer","resources","type","author","relatedModules"],"sources":["C:/Users/omdag/OneDrive/Desktop/gfg/client/src/data/modules/verilogFundamentals.js"],"sourcesContent":["/**\r\n * Verilog Fundamentals Module\r\n * \r\n * This module covers the basics of Verilog HDL and digital design.\r\n */\r\n\r\nexport const verilogFundamentals = {\r\n  id: 1,\r\n  title: \"Verilog Fundamentals\",\r\n  description: \"Master the basics of Verilog HDL and start your journey in digital design\",\r\n  level: \"Beginner\",\r\n  duration: \"4 weeks\",\r\n  image: \"https://www.fpgakey.com/upload/2020/04/29/20200429102215-b170db2c.png\",\r\n  \r\n  instructor: {\r\n    name: \"Dr. Sarah Johnson\",\r\n    title: \"Professor of Electrical Engineering\",\r\n    bio: \"Dr. Johnson has over 12 years of experience in FPGA design and digital systems. She has led numerous industry projects and published extensively in the field of hardware design languages and methodologies.\",\r\n    avatar: \"https://randomuser.me/api/portraits/women/25.jpg\"\r\n  },\r\n  \r\n  overview: `\r\n    <p>Welcome to Verilog Fundamentals! This comprehensive course provides a solid introduction to Verilog Hardware Description Language (HDL), which is widely used in the industry for digital design and verification.</p>\r\n    \r\n    <p>Whether you aim to design FPGAs, ASICs, or simply understand digital hardware better, this module will give you the foundation you need. Starting with basic syntax and concepts, you'll quickly progress to designing both combinational and sequential circuits.</p>\r\n    \r\n    <p>You'll learn how to create reusable modules, write effective testbenches for verification, and implement complex designs like finite state machines. Through hands-on exercises and practical examples, you'll gain experience in translating design requirements into working Verilog code.</p>\r\n    \r\n    <p>By the end of this module, you'll be able to design, implement, and verify digital circuits using Verilog HDL, preparing you for more advanced topics in digital design.</p>\r\n  `,\r\n  \r\n  prerequisites: [\r\n    \"Basic understanding of digital logic\",\r\n    \"Familiarity with binary number systems\",\r\n    \"No prior HDL experience required\"\r\n  ],\r\n  \r\n  skills: [\r\n    \"Verilog Syntax\",\r\n    \"Combinational Logic Design\",\r\n    \"Sequential Logic Design\",\r\n    \"Testbench Development\",\r\n    \"Finite State Machines\",\r\n    \"RTL Design\",\r\n    \"Hardware Verification\",\r\n    \"Module Instantiation\",\r\n    \"Behavioral Modeling\",\r\n    \"Structural Modeling\"\r\n  ],\r\n  \r\n  chapters: [\r\n    {\r\n      id: 1,\r\n      title: \"Introduction to Hardware Description Languages\",\r\n      description: \"Learn the fundamentals of hardware description languages and their role in digital design\",\r\n      estimatedTime: \"3 hours\",\r\n      \r\n      sections: [\r\n        {\r\n          id: \"1.1\",\r\n          title: \"What is a Hardware Description Language?\",\r\n          content: `\r\n            <p>A Hardware Description Language (HDL) is a specialized programming language used to describe the structure and behavior of electronic circuits, particularly digital logic circuits. Unlike traditional programming languages that are used to create software applications, HDLs are used to describe hardware and are the foundation of modern digital circuit design.</p>\r\n            \r\n            <h4>Key Characteristics of HDLs</h4>\r\n            <ul>\r\n              <li><strong>Hardware Modeling</strong>: HDLs allow designers to model hardware components and their connections.</li>\r\n              <li><strong>Concurrency</strong>: HDLs support describing operations that occur simultaneously, reflecting the parallel nature of hardware.</li>\r\n              <li><strong>Timing</strong>: They provide mechanisms to describe timing constraints and synchronization.</li>\r\n              <li><strong>Hierarchy</strong>: HDLs support hierarchical design, enabling the creation of complex systems from simpler components.</li>\r\n            </ul>\r\n            \r\n            <h4>Popular Hardware Description Languages</h4>\r\n            <p>Several HDLs have been developed over the years, with the most prominent being:</p>\r\n            <ul>\r\n              <li><strong>Verilog</strong>: Created in the 1980s, Verilog is known for its C-like syntax and is widely used in industry.</li>\r\n              <li><strong>VHDL</strong>: Very High-Speed Integrated Circuit Hardware Description Language, developed under the Department of Defense's VHSIC program, is more verbose and Ada-like.</li>\r\n              <li><strong>SystemVerilog</strong>: An extension of Verilog with features for verification, system-level design, and high-level synthesis.</li>\r\n              <li><strong>Chisel</strong>: A more recent HDL embedded in Scala that helps generate highly parameterized hardware designs.</li>\r\n            </ul>\r\n            \r\n            <p>In this module, we'll focus on Verilog, one of the most widely used HDLs in the industry.</p>\r\n          `\r\n        },\r\n        {\r\n          id: \"1.2\",\r\n          title: \"The Digital Design Flow\",\r\n          content: `\r\n            <p>The digital design flow is the process of taking a design concept and transforming it into physical hardware. Understanding this flow is essential for any hardware designer.</p>\r\n            \r\n            <h4>Stages of the Digital Design Flow</h4>\r\n            <ol>\r\n              <li><strong>Specification</strong>: Define what the system should do.</li>\r\n              <li><strong>Architecture Design</strong>: High-level design of system components and their interactions.</li>\r\n              <li><strong>Implementation</strong>: Writing HDL code to describe the design.</li>\r\n              <li><strong>Simulation</strong>: Verifying the functionality through simulation.</li>\r\n              <li><strong>Synthesis</strong>: Converting the HDL description into a gate-level representation.</li>\r\n              <li><strong>Implementation (Place and Route)</strong>: Mapping the design to the target technology.</li>\r\n              <li><strong>Verification</strong>: Ensure the design meets specifications.</li>\r\n              <li><strong>Manufacturing</strong>: Fabricating the physical chip.</li>\r\n            </ol>\r\n            \r\n            <p>Verilog plays a critical role in the implementation and simulation stages of this flow.</p>\r\n            \r\n            <h4>Tools in the Digital Design Flow</h4>\r\n            <p>Several tools are used throughout the design flow:</p>\r\n            <ul>\r\n              <li><strong>Text Editors/IDEs</strong>: For writing HDL code (e.g., VSCode with Verilog extensions).</li>\r\n              <li><strong>Simulators</strong>: To test the behavior of the design (e.g., ModelSim, VCS, Icarus Verilog).</li>\r\n              <li><strong>Synthesis Tools</strong>: To convert HDL to gate-level designs (e.g., Synopsys Design Compiler, Xilinx Vivado).</li>\r\n              <li><strong>Place and Route Tools</strong>: To map the design to the target technology (often part of FPGA vendor tools).</li>\r\n              <li><strong>Formal Verification Tools</strong>: To mathematically prove design correctness.</li>\r\n            </ul>\r\n            \r\n            <p>Throughout this module, we'll use simulators to verify our Verilog designs.</p>\r\n          `\r\n        },\r\n        {\r\n          id: \"1.3\",\r\n          title: \"Introduction to Verilog\",\r\n          content: `\r\n            <p>Verilog is one of the most widely used hardware description languages in the industry. It was created in the mid-1980s by Phil Moorby at Gateway Design Automation, which was later acquired by Cadence Design Systems. In 1995, Verilog became IEEE Standard 1364.</p>\r\n            \r\n            <h4>Key Features of Verilog</h4>\r\n            <ul>\r\n              <li><strong>C-like Syntax</strong>: Familiar to many programmers, making it relatively easy to learn.</li>\r\n              <li><strong>Concurrency</strong>: Supports describing parallel operations.</li>\r\n              <li><strong>Multiple Abstraction Levels</strong>: From high-level behavioral descriptions to low-level structural representations.</li>\r\n              <li><strong>Timing Control</strong>: Mechanisms for specifying timing constraints and delays.</li>\r\n              <li><strong>Modularity</strong>: Support for hierarchical design through modules.</li>\r\n              <li><strong>Testbench Capabilities</strong>: Built-in features for verification.</li>\r\n            </ul>\r\n            \r\n            <h4>Verilog vs. Traditional Programming Languages</h4>\r\n            <p>While Verilog's syntax may look similar to C, it's important to understand the fundamental differences:</p>\r\n            <ul>\r\n              <li><strong>Purpose</strong>: Verilog describes hardware, not software algorithms.</li>\r\n              <li><strong>Execution</strong>: Verilog is not \"executed\" sequentially like C; it represents concurrent hardware operations.</li>\r\n              <li><strong>Time</strong>: Verilog has explicit constructs for timing and synchronization.</li>\r\n              <li><strong>Compilation</strong>: Verilog is synthesized into hardware, not compiled into machine code.</li>\r\n            </ul>\r\n            \r\n            <h4>Modeling Styles in Verilog</h4>\r\n            <p>Verilog supports different modeling styles for describing hardware:</p>\r\n            <ul>\r\n              <li><strong>Behavioral Modeling</strong>: Describes what the circuit does without specifying the structure.</li>\r\n              <li><strong>Dataflow Modeling</strong>: Describes how data flows through the circuit using continuous assignments.</li>\r\n              <li><strong>Structural Modeling</strong>: Describes the circuit in terms of its components and their connections.</li>\r\n              <li><strong>Mixed Modeling</strong>: Combines different modeling styles as appropriate.</li>\r\n            </ul>\r\n            \r\n            <p>We'll explore each of these modeling styles in detail throughout this module.</p>\r\n          `\r\n        },\r\n        {\r\n          id: \"1.4\",\r\n          title: \"Setting Up Your Development Environment\",\r\n          content: `\r\n            <p>Before we start writing Verilog code, we need to set up a development environment. This section covers the tools you'll need and how to configure them.</p>\r\n            \r\n            <h4>Essential Tools</h4>\r\n            <ol>\r\n              <li><strong>Text Editor or IDE</strong>: Visual Studio Code with Verilog extensions is recommended for beginners.</li>\r\n              <li><strong>Verilog Simulator</strong>: We'll use the open-source Icarus Verilog and GTKWave for this module.</li>\r\n            </ol>\r\n            \r\n            <h4>Setting Up Icarus Verilog</h4>\r\n            <p>Icarus Verilog is a free, open-source Verilog simulation and synthesis tool.</p>\r\n            \r\n            <p><strong>Installation:</strong></p>\r\n            <ul>\r\n              <li>Windows: Download the installer from <a href=\"http://bleyer.org/icarus/\" target=\"_blank\">http://bleyer.org/icarus/</a></li>\r\n              <li>macOS: <code>brew install icarus-verilog</code></li>\r\n              <li>Linux: <code>sudo apt-get install iverilog</code> (Ubuntu/Debian) or equivalent for your distribution</li>\r\n            </ul>\r\n            \r\n            <h4>Setting Up GTKWave</h4>\r\n            <p>GTKWave is a waveform viewer that we'll use to visualize simulation results.</p>\r\n            \r\n            <p><strong>Installation:</strong></p>\r\n            <ul>\r\n              <li>Windows: Included with the Icarus Verilog installer</li>\r\n              <li>macOS: <code>brew install gtkwave</code></li>\r\n              <li>Linux: <code>sudo apt-get install gtkwave</code> (Ubuntu/Debian) or equivalent for your distribution</li>\r\n            </ul>\r\n            \r\n            <h4>Setting Up VS Code for Verilog</h4>\r\n            <ol>\r\n              <li>Install Visual Studio Code from <a href=\"https://code.visualstudio.com/\" target=\"_blank\">https://code.visualstudio.com/</a></li>\r\n              <li>Open VS Code and go to the Extensions view (Ctrl+Shift+X or Cmd+Shift+X)</li>\r\n              <li>Search for \"Verilog\" and install the \"Verilog-HDL/SystemVerilog/Bluespec SystemVerilog\" extension by mshr-h</li>\r\n              <li>Optionally, install \"Verilog Formatting\" for code formatting</li>\r\n            </ol>\r\n            \r\n            <p>With these tools set up, you're ready to start writing and simulating Verilog code!</p>\r\n          `\r\n        }\r\n      ],\r\n      \r\n      examples: [\r\n        {\r\n          id: \"example_1_1\",\r\n          title: \"Simple Verilog Module\",\r\n          description: \"A basic module implementing a 2-input AND gate\",\r\n          code: `// Simple AND gate module\r\nmodule and_gate(\r\n  input wire a,\r\n  input wire b,\r\n  output wire y\r\n);\r\n  \r\n  // Behavioral description using continuous assignment\r\n  assign y = a & b;\r\n  \r\nendmodule`,\r\n          explanation: \"This example shows a simple Verilog module that implements a 2-input AND gate. The module has two input ports (a and b) and one output port (y). The behavior is described using a continuous assignment statement that sets the output y to the logical AND of inputs a and b.\"\r\n        },\r\n        {\r\n          id: \"example_1_2\",\r\n          title: \"Basic Testbench\",\r\n          description: \"A simple testbench to verify the AND gate module\",\r\n          code: `// Testbench for AND gate\r\nmodule and_gate_tb;\r\n  \r\n  // Declare testbench signals\r\n  reg a, b;      // Inputs are reg type in testbench\r\n  wire y;        // Output is wire type\r\n  \r\n  // Instantiate the module under test\r\n  and_gate uut (\r\n    .a(a),\r\n    .b(b),\r\n    .y(y)\r\n  );\r\n  \r\n  // Stimulus generation\r\n  initial begin\r\n    // Display header for simulation output\r\n    $display(\"a b | y\");\r\n    $display(\"---+--\");\r\n    \r\n    // Test all input combinations\r\n    a = 0; b = 0;\r\n    #10; // Wait 10 time units\r\n    $display(\"%b %b | %b\", a, b, y);\r\n    \r\n    a = 0; b = 1;\r\n    #10;\r\n    $display(\"%b %b | %b\", a, b, y);\r\n    \r\n    a = 1; b = 0;\r\n    #10;\r\n    $display(\"%b %b | %b\", a, b, y);\r\n    \r\n    a = 1; b = 1;\r\n    #10;\r\n    $display(\"%b %b | %b\", a, b, y);\r\n    \r\n    // End simulation\r\n    $finish;\r\n  end\r\n  \r\nendmodule`,\r\n          explanation: \"This testbench instantiates the and_gate module and applies all possible input combinations to verify its functionality. The $display system task is used to print the input and output values, creating a truth table. The #10 delay statements ensure that each input combination is stable before reading the output.\"\r\n        }\r\n      ],\r\n      \r\n      videos: [\r\n        {\r\n          id: \"video_1_1\",\r\n          title: \"Introduction to Verilog and HDLs\",\r\n          description: \"A comprehensive introduction to Hardware Description Languages and Verilog\",\r\n          url: \"https://www.youtube.com/watch?v=PJGvZSlsLKs\",\r\n          thumbnail: \"https://i.ytimg.com/vi/PJGvZSlsLKs/hqdefault.jpg\",\r\n          duration: \"13:35\"\r\n        },\r\n        {\r\n          id: \"video_1_2\",\r\n          title: \"Verilog Development Environment Setup\",\r\n          description: \"How to set up Icarus Verilog and GTKWave for Verilog development\",\r\n          url: \"https://www.youtube.com/watch?v=VrPvgKPhUk0\",\r\n          thumbnail: \"https://i.ytimg.com/vi/VrPvgKPhUk0/hqdefault.jpg\",\r\n          duration: \"15:22\"\r\n        }\r\n      ],\r\n      \r\n      quiz: {\r\n        id: \"quiz_1\",\r\n        title: \"Introduction to HDLs Quiz\",\r\n        description: \"Test your understanding of HDLs and Verilog basics\",\r\n        questions: [\r\n          {\r\n            id: \"q1_1\",\r\n            question: \"What is the primary purpose of a Hardware Description Language?\",\r\n            options: [\r\n              { id: \"a\", text: \"To write software applications\" },\r\n              { id: \"b\", text: \"To describe the structure and behavior of electronic circuits\" },\r\n              { id: \"c\", text: \"To create operating systems\" },\r\n              { id: \"d\", text: \"To program microcontrollers\" }\r\n            ],\r\n            correctAnswer: \"b\",\r\n            explanation: \"Hardware Description Languages (HDLs) are specialized languages designed to describe the structure and behavior of electronic circuits, particularly digital logic circuits.\"\r\n          },\r\n          {\r\n            id: \"q1_2\",\r\n            question: \"Which of the following is NOT a key characteristic of HDLs?\",\r\n            options: [\r\n              { id: \"a\", text: \"Support for concurrency\" },\r\n              { id: \"b\", text: \"Ability to describe timing constraints\" },\r\n              { id: \"c\", text: \"Sequential execution only\" },\r\n              { id: \"d\", text: \"Hierarchical design support\" }\r\n            ],\r\n            correctAnswer: \"c\",\r\n            explanation: \"HDLs are designed to model hardware which operates in parallel. They support concurrency, not just sequential execution, which is a key difference from traditional programming languages.\"\r\n          },\r\n          {\r\n            id: \"q1_3\",\r\n            question: \"When was Verilog first created?\",\r\n            options: [\r\n              { id: \"a\", text: \"1970s\" },\r\n              { id: \"b\", text: \"1980s\" },\r\n              { id: \"c\", text: \"1990s\" },\r\n              { id: \"d\", text: \"2000s\" }\r\n            ],\r\n            correctAnswer: \"b\",\r\n            explanation: \"Verilog was created in the mid-1980s by Phil Moorby at Gateway Design Automation, which was later acquired by Cadence Design Systems.\"\r\n          },\r\n          {\r\n            id: \"q1_4\",\r\n            question: \"What is the purpose of a Verilog simulator?\",\r\n            options: [\r\n              { id: \"a\", text: \"To convert Verilog code into physical hardware\" },\r\n              { id: \"b\", text: \"To check the syntax of Verilog code\" },\r\n              { id: \"c\", text: \"To test the behavior of a design without physical hardware\" },\r\n              { id: \"d\", text: \"To optimize the design for specific hardware\" }\r\n            ],\r\n            correctAnswer: \"c\",\r\n            explanation: \"A Verilog simulator allows designers to test the behavior of their design in a virtual environment before implementing it in physical hardware.\"\r\n          },\r\n          {\r\n            id: \"q1_5\",\r\n            question: \"Which modeling style in Verilog describes what the circuit does without specifying the structure?\",\r\n            options: [\r\n              { id: \"a\", text: \"Structural modeling\" },\r\n              { id: \"b\", text: \"Dataflow modeling\" },\r\n              { id: \"c\", text: \"Behavioral modeling\" },\r\n              { id: \"d\", text: \"Physical modeling\" }\r\n            ],\r\n            correctAnswer: \"c\",\r\n            explanation: \"Behavioral modeling describes what the circuit does (its behavior) without detailing the structure or implementation details.\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \r\n  // Additional chapters would be defined here\r\n  \r\n  resources: [\r\n    {\r\n      id: \"resource_1\",\r\n      title: \"IEEE Standard 1364-2005\",\r\n      description: \"The official IEEE standard for Verilog HDL\",\r\n      type: \"Standard\",\r\n      url: \"https://ieeexplore.ieee.org/document/1620780\",\r\n      author: \"IEEE\"\r\n    },\r\n    {\r\n      id: \"resource_2\",\r\n      title: \"Verilog HDL: A Guide to Digital Design and Synthesis\",\r\n      description: \"Comprehensive book on Verilog HDL by Samir Palnitkar\",\r\n      type: \"Book\",\r\n      author: \"Samir Palnitkar\",\r\n      url: \"https://www.amazon.com/Verilog-HDL-Synthesis-Samir-Palnitkar/dp/0134516753\"\r\n    },\r\n    {\r\n      id: \"resource_3\",\r\n      title: \"HDLBits\",\r\n      description: \"Online platform for practicing Verilog problems\",\r\n      type: \"Website\",\r\n      url: \"https://hdlbits.01xz.net/\",\r\n      author: \"HDLBits\"\r\n    },\r\n    {\r\n      id: \"resource_4\",\r\n      title: \"Icarus Verilog\",\r\n      description: \"Open-source Verilog simulation and synthesis tool\",\r\n      type: \"Tool\",\r\n      url: \"http://iverilog.icarus.com/\",\r\n      author: \"Stephen Williams\"\r\n    }\r\n  ],\r\n  \r\n  relatedModules: [\r\n    {\r\n      id: 2,\r\n      title: \"Sequential Circuit Design\",\r\n      description: \"Learn the principles of designing sequential logic circuits using Verilog\",\r\n      level: \"Intermediate\"\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Advanced Testbench Techniques\",\r\n      description: \"Master comprehensive verification strategies for complex digital designs\",\r\n      level: \"Intermediate\"\r\n    },\r\n    {\r\n      id: 6,\r\n      title: \"FPGA Implementation Techniques\",\r\n      description: \"Learn practical techniques for efficient FPGA implementation\",\r\n      level: \"Intermediate\"\r\n    }\r\n  ]\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,mBAAmB,GAAG;EACjCC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,sBAAsB;EAC7BC,WAAW,EAAE,2EAA2E;EACxFC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE,SAAS;EACnBC,KAAK,EAAE,uEAAuE;EAE9EC,UAAU,EAAE;IACVC,IAAI,EAAE,mBAAmB;IACzBN,KAAK,EAAE,qCAAqC;IAC5CO,GAAG,EAAE,+MAA+M;IACpNC,MAAM,EAAE;EACV,CAAC;EAEDC,QAAQ,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EAEDC,aAAa,EAAE,CACb,sCAAsC,EACtC,wCAAwC,EACxC,kCAAkC,CACnC;EAEDC,MAAM,EAAE,CACN,gBAAgB,EAChB,4BAA4B,EAC5B,yBAAyB,EACzB,uBAAuB,EACvB,uBAAuB,EACvB,YAAY,EACZ,uBAAuB,EACvB,sBAAsB,EACtB,qBAAqB,EACrB,qBAAqB,CACtB;EAEDC,QAAQ,EAAE,CACR;IACEb,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,gDAAgD;IACvDC,WAAW,EAAE,2FAA2F;IACxGY,aAAa,EAAE,SAAS;IAExBC,QAAQ,EAAE,CACR;MACEf,EAAE,EAAE,KAAK;MACTC,KAAK,EAAE,0CAA0C;MACjDe,OAAO,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,CAAC,EACD;MACEhB,EAAE,EAAE,KAAK;MACTC,KAAK,EAAE,yBAAyB;MAChCe,OAAO,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,CAAC,EACD;MACEhB,EAAE,EAAE,KAAK;MACTC,KAAK,EAAE,yBAAyB;MAChCe,OAAO,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,CAAC,EACD;MACEhB,EAAE,EAAE,KAAK;MACTC,KAAK,EAAE,yCAAyC;MAChDe,OAAO,EAAE;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,CAAC,CACF;IAEDC,QAAQ,EAAE,CACR;MACEjB,EAAE,EAAE,aAAa;MACjBC,KAAK,EAAE,uBAAuB;MAC9BC,WAAW,EAAE,gDAAgD;MAC7DgB,IAAI,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;MACAC,WAAW,EAAE;IACf,CAAC,EACD;MACEnB,EAAE,EAAE,aAAa;MACjBC,KAAK,EAAE,iBAAiB;MACxBC,WAAW,EAAE,kDAAkD;MAC/DgB,IAAI,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;MACAC,WAAW,EAAE;IACf,CAAC,CACF;IAEDC,MAAM,EAAE,CACN;MACEpB,EAAE,EAAE,WAAW;MACfC,KAAK,EAAE,kCAAkC;MACzCC,WAAW,EAAE,4EAA4E;MACzFmB,GAAG,EAAE,6CAA6C;MAClDC,SAAS,EAAE,kDAAkD;MAC7DlB,QAAQ,EAAE;IACZ,CAAC,EACD;MACEJ,EAAE,EAAE,WAAW;MACfC,KAAK,EAAE,uCAAuC;MAC9CC,WAAW,EAAE,kEAAkE;MAC/EmB,GAAG,EAAE,6C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}