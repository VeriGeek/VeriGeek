{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omdag\\\\OneDrive\\\\Desktop\\\\gfg\\\\client\\\\src\\\\pages\\\\CodeEditor.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { Box, Typography, Button, Grid, Paper, Tabs, Tab, Snackbar, Alert, List, ListItem, ListItemIcon, ListItemText, LinearProgress, FormControl, InputLabel, Select, MenuItem, Chip, Divider } from '@mui/material';\nimport { PlayArrow, Save, ArrowBack, LightbulbOutlined, BarChart, Check, MenuBook, Assignment, Code, Terminal, Assessment, Info, BugReport, Download, Upload, ContentCopy, ContentPaste } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CodeEditor = () => {\n  _s();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [selectedModule, setSelectedModule] = useState(searchParams.get('module') || 'full_adder');\n  const [code, setCode] = useState('');\n  const [output, setOutput] = useState('');\n  const [consoleOutput, setConsoleOutput] = useState('');\n  const [isCompiling, setIsCompiling] = useState(false);\n  const [tabValue, setTabValue] = useState(0);\n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n  const [exerciseData, setExerciseData] = useState(null);\n\n  // Available practice modules\n  const practiceModules = [{\n    id: 'full_adder',\n    name: 'Full Adder',\n    level: 'Beginner',\n    category: 'Combinational'\n  }, {\n    id: 'ripple_carry_adder',\n    name: '4-bit Ripple Carry Adder',\n    level: 'Beginner',\n    category: 'Combinational'\n  }, {\n    id: 'alu',\n    name: '4-bit ALU',\n    level: 'Intermediate',\n    category: 'Combinational'\n  }, {\n    id: 'counter',\n    name: '4-bit Counter',\n    level: 'Beginner',\n    category: 'Sequential'\n  }, {\n    id: 'shift_register',\n    name: '8-bit Shift Register',\n    level: 'Intermediate',\n    category: 'Sequential'\n  }, {\n    id: 'fsm_traffic',\n    name: 'Traffic Light Controller FSM',\n    level: 'Intermediate',\n    category: 'Sequential'\n  }, {\n    id: 'uart_tx',\n    name: 'UART Transmitter',\n    level: 'Advanced',\n    category: 'Communication'\n  }, {\n    id: 'memory_controller',\n    name: 'Simple Memory Controller',\n    level: 'Advanced',\n    category: 'Memory'\n  }, {\n    id: 'fifo',\n    name: 'Synchronous FIFO',\n    level: 'Advanced',\n    category: 'Memory'\n  }];\n\n  // Handle module selection change\n  const handleModuleChange = event => {\n    const moduleId = event.target.value;\n    setSelectedModule(moduleId);\n    setSearchParams({\n      module: moduleId\n    });\n    // Reset output\n    setOutput('');\n    setConsoleOutput('');\n    setTabValue(0);\n  };\n\n  // Fetch module data when selection changes\n  useEffect(() => {\n    // In a real application, this would be an API call\n    // For now, we'll simulate fetching data for different modules\n    const fetchModuleData = async () => {\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      let moduleTemplate;\n      switch (selectedModule) {\n        case 'full_adder':\n          moduleTemplate = `module full_adder(\n  input wire a, b, cin,\n  output wire sum, cout\n);\n  // TODO: Implement full adder logic\n  // sum = a XOR b XOR cin\n  // cout = (a AND b) OR (cin AND (a XOR b))\n  \n  // Your code here:\n  \nendmodule\n\n// Testbench (uncomment to simulate)\n/*\nmodule full_adder_tb;\n  // Testbench signals\n  reg a, b, cin;\n  wire sum, cout;\n  \n  // Instantiate the full_adder\n  full_adder dut(\n    .a(a),\n    .b(b),\n    .cin(cin),\n    .sum(sum),\n    .cout(cout)\n  );\n  \n  // Test stimulus\n  initial begin\n    // Display header\n    $display(\"a b cin | sum cout\");\n    $display(\"--------+---------\");\n    \n    // Test all input combinations\n    {a, b, cin} = 3'b000; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b001; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b010; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b011; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b100; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b101; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b110; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    {a, b, cin} = 3'b111; #10;\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\n    \n    $finish;\n  end\nendmodule\n*/`;\n          setExerciseData({\n            id: 'full_adder',\n            title: 'Implementing a Full Adder',\n            description: 'Create a Verilog module for a full adder with inputs a, b, cin and outputs sum and cout. A full adder adds three bits and produces a sum bit and a carry bit.',\n            objectives: ['Understand the operation of a full adder circuit', 'Implement combinational logic using Verilog assign statements', 'Utilize internal wires for intermediate signals', 'Apply proper port declarations with the wire data type'],\n            background: 'A full adder is a fundamental building block in digital circuit design, used to add two binary digits along with a carry input. It produces a sum output and a carry output, which can be cascaded to create multi-bit adders.',\n            testCases: [{\n              inputs: 'a=0, b=0, cin=0',\n              expectedOutputs: 'sum=0, cout=0',\n              explanation: 'With all inputs 0, both sum and carry are 0'\n            }, {\n              inputs: 'a=1, b=0, cin=0',\n              expectedOutputs: 'sum=1, cout=0',\n              explanation: 'Adding just a single 1 gives sum=1, with no carry'\n            }, {\n              inputs: 'a=0, b=1, cin=0',\n              expectedOutputs: 'sum=1, cout=0',\n              explanation: 'Adding just a single 1 gives sum=1, with no carry'\n            }, {\n              inputs: 'a=0, b=0, cin=1',\n              expectedOutputs: 'sum=1, cout=0',\n              explanation: 'Adding just a single 1 gives sum=1, with no carry'\n            }, {\n              inputs: 'a=1, b=1, cin=0',\n              expectedOutputs: 'sum=0, cout=1',\n              explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)'\n            }, {\n              inputs: 'a=1, b=0, cin=1',\n              expectedOutputs: 'sum=0, cout=1',\n              explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)'\n            }, {\n              inputs: 'a=0, b=1, cin=1',\n              expectedOutputs: 'sum=0, cout=1',\n              explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)'\n            }, {\n              inputs: 'a=1, b=1, cin=1',\n              expectedOutputs: 'sum=1, cout=1',\n              explanation: 'Adding three 1s results in 1 with a carry of 1 (binary 11)'\n            }],\n            hints: ['Remember the boolean equations for a full adder: sum = a ⊕ b ⊕ cin and cout = (a·b) + (cin·(a⊕b))', 'Use intermediate wires to make your code more readable', 'The XOR operator in Verilog is represented by the caret symbol (^)', 'Use the & operator for AND and | operator for OR operations'],\n            truthTable: [{\n              a: 0,\n              b: 0,\n              cin: 0,\n              sum: 0,\n              cout: 0\n            }, {\n              a: 0,\n              b: 0,\n              cin: 1,\n              sum: 1,\n              cout: 0\n            }, {\n              a: 0,\n              b: 1,\n              cin: 0,\n              sum: 1,\n              cout: 0\n            }, {\n              a: 0,\n              b: 1,\n              cin: 1,\n              sum: 0,\n              cout: 1\n            }, {\n              a: 1,\n              b: 0,\n              cin: 0,\n              sum: 1,\n              cout: 0\n            }, {\n              a: 1,\n              b: 0,\n              cin: 1,\n              sum: 0,\n              cout: 1\n            }, {\n              a: 1,\n              b: 1,\n              cin: 0,\n              sum: 0,\n              cout: 1\n            }, {\n              a: 1,\n              b: 1,\n              cin: 1,\n              sum: 1,\n              cout: 1\n            }],\n            imageUrl: 'https://www.researchgate.net/publication/329466923/figure/fig12/AS:701497183633415@1544299999838/A-full-adder-circuit-and-its-truth-table.png'\n          });\n          break;\n        case 'ripple_carry_adder':\n          moduleTemplate = `module ripple_carry_adder(\n  input [3:0] a, b,\n  input cin,\n  output [3:0] sum,\n  output cout\n);\n  // TODO: Implement a 4-bit ripple carry adder\n  // Hint: You can use full adders connected in series\n  \n  // Your code here:\n  \nendmodule\n\n// Optional: Define a full adder module below\n// module full_adder(...);\n// ...\n// endmodule`;\n          setExerciseData({\n            id: 'ripple_carry_adder',\n            title: 'Implementing a 4-bit Ripple Carry Adder',\n            description: 'Create a Verilog module for a 4-bit ripple carry adder that adds two 4-bit numbers and produces a 4-bit sum and a carry out.',\n            objectives: ['Understand multi-bit adder design', 'Learn to reuse components in digital design', 'Practice connecting modules together', 'Implement a cascaded design pattern'],\n            background: 'A ripple carry adder combines multiple full adders to add multi-bit numbers. The carry bit \"ripples\" from one adder to the next, which is simple to implement but can introduce propagation delays.',\n            testCases: [{\n              inputs: 'a=0000, b=0000, cin=0',\n              expectedOutputs: 'sum=0000, cout=0',\n              explanation: 'Adding zeros gives zero'\n            }, {\n              inputs: 'a=1010, b=0101, cin=0',\n              expectedOutputs: 'sum=1111, cout=0',\n              explanation: '10 + 5 = 15 (no carry out)'\n            }, {\n              inputs: 'a=1111, b=0001, cin=0',\n              expectedOutputs: 'sum=0000, cout=1',\n              explanation: '15 + 1 = 16 (rolls over with carry)'\n            }, {\n              inputs: 'a=1111, b=1111, cin=0',\n              expectedOutputs: 'sum=1110, cout=1',\n              explanation: '15 + 15 = 30 (exceeds 4 bits)'\n            }],\n            hints: ['Start by designing or reusing a full adder module', 'Connect four full adders, with the carry output of each going to the carry input of the next', 'The first full adder takes the cin input, and the last full adder produces the cout output', 'Remember to use proper bit indices when connecting multi-bit signals'],\n            imageUrl: 'https://www.researchgate.net/publication/265755789/figure/fig1/AS:668550417743875@1536402642245/4-bit-Ripple-Carry-Adder.png'\n          });\n          break;\n        case 'alu':\n          moduleTemplate = `module alu_4bit(\n  input [3:0] a, b,\n  input [1:0] op,\n  output reg [3:0] result,\n  output zero\n);\n  // TODO: Implement a 4-bit ALU with the following operations:\n  // op = 00: ADD (a + b)\n  // op = 01: SUB (a - b)\n  // op = 10: AND (a & b)\n  // op = 11: OR (a | b)\n  // zero flag should be set when result is 0\n  \n  // Your code here:\n  \nendmodule`;\n          setExerciseData({\n            id: 'alu',\n            title: 'Designing a 4-bit ALU',\n            description: 'Create a 4-bit Arithmetic Logic Unit (ALU) that can perform addition, subtraction, AND, and OR operations.',\n            objectives: ['Design a multi-functional digital component', 'Implement operation selection using control signals', 'Practice using conditional (case) statements in Verilog', 'Understand zero flag generation'],\n            background: 'An ALU is a fundamental digital circuit that performs arithmetic and logical operations. ALUs are a critical component in CPU design, forming the heart of the execution unit.',\n            testCases: [{\n              inputs: 'a=0101, b=0011, op=00',\n              expectedOutputs: 'result=1000, zero=0',\n              explanation: 'ADD: 5 + 3 = 8'\n            }, {\n              inputs: 'a=1000, b=0011, op=01',\n              expectedOutputs: 'result=0101, zero=0',\n              explanation: 'SUB: 8 - 3 = 5'\n            }, {\n              inputs: 'a=1001, b=0011, op=10',\n              expectedOutputs: 'result=0001, zero=0',\n              explanation: 'AND: 1001 & 0011 = 0001'\n            }, {\n              inputs: 'a=1000, b=0011, op=11',\n              expectedOutputs: 'result=1011, zero=0',\n              explanation: 'OR: 1000 | 0011 = 1011'\n            }, {\n              inputs: 'a=0011, b=0011, op=01',\n              expectedOutputs: 'result=0000, zero=1',\n              explanation: 'SUB: 3 - 3 = 0 (zero flag set)'\n            }],\n            hints: ['Use a case statement to implement different operations based on the op input', 'For subtraction, remember that a - b can be implemented as a + (complement of b) + 1', 'The zero flag is set when all bits of the result are 0', 'Use the always block with blocking assignments for combinational logic'],\n            imageUrl: 'https://www.allaboutcircuits.com/uploads/articles/an-introduction-to-arithmetic-logic-units-alus-fig2.jpg'\n          });\n          break;\n        case 'fsm_traffic':\n          moduleTemplate = `module traffic_light_controller(\n  input clk,\n  input reset,\n  input enable,\n  output reg [2:0] highway_lights, // R, Y, G\n  output reg [2:0] farm_road_lights // R, Y, G\n);\n  // TODO: Implement a traffic light controller for a highway and farm road intersection\n  // The highway normally stays green, while the farm road stays red\n  // When enable is high, start the sequence to allow farm road traffic\n  // Proper yellow light timing should be included\n  // Hint: Define state parameters, create a state register, and use a state machine approach\n  \n  // Your code here:\n  \nendmodule`;\n          setExerciseData({\n            id: 'fsm_traffic',\n            title: 'Traffic Light Controller FSM',\n            description: 'Design a traffic light controller for an intersection between a highway and a farm road using a finite state machine approach.',\n            objectives: ['Implement a finite state machine (FSM) in Verilog', 'Practice sequential circuit design', 'Learn state encoding and transitions', 'Understand timing sequences in digital control systems'],\n            background: 'Traffic light controllers are classical examples of finite state machines. They need to maintain the current state, handle transitions based on inputs, and control outputs according to the current state.',\n            testCases: [{\n              inputs: 'enable=0 (steady state)',\n              expectedOutputs: 'highway=GREEN, farm=RED',\n              explanation: 'Normal operation with highway traffic flowing'\n            }, {\n              inputs: 'enable transitions to 1',\n              expectedOutputs: 'Sequence starts: highway→YELLOW→RED, farm→RED→GREEN',\n              explanation: 'Transition sequence initiated'\n            }, {\n              inputs: 'After timeout with enable=0',\n              expectedOutputs: 'Sequence ends: highway→GREEN, farm→RED',\n              explanation: 'Return to normal operation'\n            }],\n            hints: ['First, define your states using parameters (e.g., HWY_GREEN, HWY_YELLOW, etc.)', 'Use a state register to keep track of the current state', 'Implement two always blocks: one for state transitions and one for output logic', 'Don\\'t forget to handle the reset condition to initialize the FSM', 'Consider adding counters for timing the duration of each state'],\n            imageUrl: 'https://www.researchgate.net/publication/261209431/figure/fig2/AS:296969038467074@1447808916417/Basic-traffic-light-controller-state-diagram.png'\n          });\n          break;\n        default:\n          moduleTemplate = '// Select a module from the dropdown to begin';\n          setExerciseData(null);\n      }\n      setCode(moduleTemplate);\n    };\n    fetchModuleData();\n  }, [selectedModule]);\n  const handleTabChange = (_, newValue) => setTabValue(newValue);\n  const handleRunCode = () => {\n    setIsCompiling(true);\n    setOutput('');\n    setConsoleOutput('');\n\n    // Validate code has the basic structure before attempting to \"compile\"\n    const errors = verifySyntax(code);\n    if (errors.length > 0) {\n      setTimeout(() => {\n        setConsoleOutput(`Syntax Verification Failed:\\n\\n${errors.map(err => `- ${err}`).join('\\n')}\\n\\nPlease fix these issues before running the code.`);\n        setOutput(`\\x1b[1;31mCompilation Error:\\x1b[0m\\nYour code has syntax issues that need to be fixed.\\nCheck the Console tab for details.`);\n        setNotification({\n          open: true,\n          message: 'Compilation failed. Please check your code for syntax issues.',\n          severity: 'error'\n        });\n        setIsCompiling(false);\n      }, 800);\n      return;\n    }\n\n    // Simulate compilation and running with module-specific validation\n    setTimeout(() => {\n      let simulationPassed = false;\n\n      // Module-specific validation\n      if (selectedModule === 'full_adder') {\n        if (code.includes('assign sum') && code.includes('assign cout')) {\n          // Check for common mistakes in full adder logic\n          if ((code.includes('a ^ b ^ cin') || code.includes('a_xor_b ^ cin')) && (code.includes('a & b') && code.includes('cin &') && code.includes('|') || code.includes('(a & b)') && code.includes('(cin &'))) {\n            simulationPassed = true;\n          } else {\n            setConsoleOutput(`Warning: Your full adder implementation may not be correct.\\n\\nExpected logic:\\n- sum = a ^ b ^ cin\\n- cout = (a & b) | (cin & (a ^ b))\\n\\nCheck your logic equations and try again.`);\n          }\n        }\n      } else if (selectedModule === 'ripple_carry_adder') {\n        if (code.includes('full_adder') && code.includes('[3:0] sum') && code.includes('cout')) {\n          // Check if the connections between adders are properly done\n          if (code.includes('wire') && (code.includes('carry') || code.includes('c1') || code.includes('c2'))) {\n            simulationPassed = true;\n          } else {\n            setConsoleOutput(`Warning: Your ripple carry adder implementation may not be correct.\\n\\nMake sure you've:\\n- Created internal wires for carries between adders\\n- Connected the full adders correctly in a chain\\n- Properly handled the 4-bit inputs and outputs`);\n          }\n        }\n      } else if (selectedModule === 'alu') {\n        if (code.includes('case') && code.includes('2\\'b00') && code.includes('assign zero')) {\n          simulationPassed = true;\n        }\n      } else if (selectedModule === 'fsm_traffic') {\n        if (code.includes('always @(posedge clk') && code.includes('parameter') && code.includes('state')) {\n          simulationPassed = true;\n        }\n      } else {\n        // For any other module, just check if it compiles\n        simulationPassed = true;\n      }\n      if (simulationPassed) {\n        // Success output specific to each module\n        if (selectedModule === 'full_adder') {\n          setOutput(`\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\n\n\\x1b[1;36mRunning simulation for full_adder module...\\x1b[0m\n\n\\x1b[1;33mTruth Table Verification:\\x1b[0m\n┌─────┬─────┬─────┬─────┬─────┬─────┬─────────────────┐\n│ \\x1b[1mTest\\x1b[0m │ \\x1b[1ma\\x1b[0m   │ \\x1b[1mb\\x1b[0m   │ \\x1b[1mcin\\x1b[0m │ \\x1b[1msum\\x1b[0m │ \\x1b[1mcout\\x1b[0m │ \\x1b[1mStatus\\x1b[0m       │\n├─────┼─────┼─────┼─────┼─────┼─────┼─────────────────┤\n│ 1   │ 0   │ 0   │ 0   │ 0   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 2   │ 0   │ 0   │ 1   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 3   │ 0   │ 1   │ 0   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 4   │ 0   │ 1   │ 1   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 5   │ 1   │ 0   │ 0   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 6   │ 1   │ 0   │ 1   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 7   │ 1   │ 1   │ 0   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│ 8   │ 1   │ 1   │ 1   │ 1   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\n└─────┴─────┴─────┴─────┴─────┴─────┴─────────────────┘\n\n\\x1b[1;33mWaveform Simulation:\\x1b[0m\nTime  a b cin | sum cout\n----------------+----------\n0ns:  0 0 0   |  0   0\n10ns: 0 0 1   |  1   0\n20ns: 0 1 0   |  1   0\n30ns: 0 1 1   |  0   1\n40ns: 1 0 0   |  1   0\n50ns: 1 0 1   |  0   1\n60ns: 1 1 0   |  0   1\n70ns: 1 1 1   |  1   1\n\n\\x1b[1;32mSummary: 8/8 test cases passed.\\x1b[0m\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your full adder implementation works correctly.\n\n\\x1b[33mPerformance Analysis:\\x1b[0m\n• Gate Count: Approximately 5 gates (2 XOR, 2 AND, 1 OR)\n• Critical Path: Input to Sum output through 2 XOR gates\n• Additional Optimizations: Using intermediate signals improves readability\n\n\\x1b[36mDesign Feedback:\\x1b[0m\n✓ Good use of intermediate signals for readability\n✓ Properly declared wire and port types\n✓ Clean implementation of the full adder equations\n`);\n        } else if (selectedModule === 'ripple_carry_adder') {\n          setOutput(`\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\n\n\\x1b[1;36mRunning simulation for ripple_carry_adder module...\\x1b[0m\n\n\\x1b[1;33mTest Case Verification:\\x1b[0m\n┌─────┬─────────────┬─────────────┬─────────────────┐\n│ \\x1b[1mTest\\x1b[0m │ \\x1b[1mInputs\\x1b[0m      │ \\x1b[1mOutputs\\x1b[0m     │ \\x1b[1mStatus\\x1b[0m       │\n├─────┼─────────────┼─────────────┼─────────────────┤\n│ 1   │ a=0000      │ sum=0000    │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│     │ b=0000      │ cout=0      │                 │\n│     │ cin=0       │             │                 │\n├─────┼─────────────┼─────────────┼─────────────────┤\n│ 2   │ a=1010      │ sum=1111    │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│     │ b=0101      │ cout=0      │                 │\n│     │ cin=0       │             │                 │\n├─────┼─────────────┼─────────────┼─────────────────┤\n│ 3   │ a=1111      │ sum=0000    │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│     │ b=0001      │ cout=1      │                 │\n│     │ cin=0       │             │                 │\n├─────┼─────────────┼─────────────┼─────────────────┤\n│ 4   │ a=1111      │ sum=1110    │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│     │ b=1111      │ cout=1      │                 │\n│     │ cin=0       │             │                 │\n└─────┴─────────────┴─────────────┴─────────────────┘\n\n\\x1b[1;33mWaveform Simulation:\\x1b[0m\nTime    a     b     cin | sum   cout\n--------------------------------+------------\n0ns:    0000  0000  0   | 0000  0\n20ns:   1010  0101  0   | 1111  0\n40ns:   1111  0001  0   | 0000  1\n60ns:   1111  1111  0   | 1110  1\n\n\\x1b[1;32mSummary: 4/4 test cases passed.\\x1b[0m\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your ripple carry adder implementation works correctly.\n\n\\x1b[33mPerformance Analysis:\\x1b[0m\n• Propagation Delay: 4 full adder delays in series\n• Gate Count: Approximately 20 gates (4 full adders)\n• Critical Path: Through all 4 full adders for carry propagation\n• Potential Improvement: Consider a carry-lookahead structure for faster operation\n`);\n        } else if (selectedModule === 'alu') {\n          setOutput(`\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\n\n\\x1b[1;36mRunning simulation for alu_4bit module...\\x1b[0m\n\n\\x1b[1;33mTest Case Verification:\\x1b[0m\n┌─────┬────────────────┬────────────────┬─────────────────┐\n│ \\x1b[1mTest\\x1b[0m │ \\x1b[1mInputs\\x1b[0m         │ \\x1b[1mOutputs\\x1b[0m        │ \\x1b[1mStatus\\x1b[0m       │\n├─────┼────────────────┼────────────────┼─────────────────┤\n│ 1   │ a=0101         │ result=1000    │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│     │ b=0011         │ zero=0         │                 │\n│     │ op=00 (ADD)    │                │                 │\n├─────┼────────────────┼────────────────┼─────────────────┤\n│ 2   │ a=1000         │ result=0101    │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│     │ b=0011         │ zero=0         │                 │\n│     │ op=01 (SUB)    │                │                 │\n├─────┼────────────────┼────────────────┼─────────────────┤\n│ 3   │ a=1001         │ result=0001    │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│     │ b=0011         │ zero=0         │                 │\n│     │ op=10 (AND)    │                │                 │\n├─────┼────────────────┼────────────────┼─────────────────┤\n│ 4   │ a=1000         │ result=1011    │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│     │ b=0011         │ zero=0         │                 │\n│     │ op=11 (OR)     │                │                 │\n├─────┼────────────────┼────────────────┼─────────────────┤\n│ 5   │ a=0011         │ result=0000    │ \\x1b[32m✓ PASSED\\x1b[0m      │\n│     │ b=0011         │ zero=1         │                 │\n│     │ op=01 (SUB)    │                │                 │\n└─────┴────────────────┴────────────────┴─────────────────┘\n\n\\x1b[1;32mSummary: 5/5 test cases passed.\\x1b[0m\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your ALU implementation works correctly.\n\n\\x1b[33mPerformance Analysis:\\x1b[0m\n• Case statement properly handles all operations\n• Zero flag is correctly generated\n• Good structure for combinational logic\n`);\n        } else if (selectedModule === 'fsm_traffic') {\n          setOutput(`\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\n\n\\x1b[1;36mRunning simulation for traffic_light_controller module...\\x1b[0m\n\n\\x1b[1;33mSequence Verification:\\x1b[0m\nStarting with enable=0 (Highway: GREEN, Farm Road: RED)\n┌─────────┬───────┬──────────────┬─────────────────┬─────────────────┐\n│ \\x1b[1mTime\\x1b[0m    │ \\x1b[1mEnable\\x1b[0m │ \\x1b[1mHighway\\x1b[0m       │ \\x1b[1mFarm Road\\x1b[0m      │ \\x1b[1mStatus\\x1b[0m       │\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\n│ 0ns     │ 0     │ GREEN (001)  │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\n│ 20ns    │ 1     │ GREEN (001)  │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\n│ 40ns    │ 1     │ YELLOW (010) │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\n│ 60ns    │ 1     │ RED (100)    │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\n│ 80ns    │ 1     │ RED (100)    │ GREEN (001)     │ \\x1b[32m✓ PASSED\\x1b[0m      │\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\n│ 100ns   │ 0     │ RED (100)    │ GREEN (001)     │ \\x1b[32m✓ PASSED\\x1b[0m      │\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\n│ 120ns   │ 0     │ RED (100)    │ YELLOW (010)    │ \\x1b[32m✓ PASSED\\x1b[0m      │\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\n│ 140ns   │ 0     │ RED (100)    │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\n│ 160ns   │ 0     │ GREEN (001)  │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\n└─────────┴───────┴──────────────┴─────────────────┴─────────────────┘\n\n\\x1b[1;32mSummary: State transitions successfully verified.\\x1b[0m\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your traffic light controller FSM implementation works correctly.\n\n\\x1b[33mDesign Feedback:\\x1b[0m\n✓ FSM state transitions are implemented correctly\n✓ Reset logic is properly handled\n✓ Outputs are correctly set based on state\n✓ Good structure for sequential control logic\n`);\n        } else {\n          // Generic success message for other modules\n          setOutput(`\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\n\n\\x1b[1;36mRunning simulation...\\x1b[0m\n\n\\x1b[1;33mTest Results:\\x1b[0m\nAll test cases have passed.\n\n\\x1b[1;32mSummary: Implementation verified successfully.\\x1b[0m\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your implementation is functionally correct.\n`);\n        }\n        setConsoleOutput(`Compilation successful. No errors or warnings detected.\\n\\nSimulation completed successfully.\\nAll test cases passed!\\n\\nSee the Simulation tab for detailed results.`);\n        setNotification({\n          open: true,\n          message: 'Implementation successful! All tests passed.',\n          severity: 'success'\n        });\n      } else {\n        // Implementation issues\n        setOutput(`\n\\x1b[1;33mCompilation Warning:\\x1b[0m\nYour module compiles, but appears to have implementation issues.\n\n\\x1b[1;31mRuntime Errors:\\x1b[0m\nThe simulation indicates that your implementation does not correctly produce the expected outputs.\n\n\\x1b[1;33mVerification Results:\\x1b[0m\nTest cases failed. See the Console tab for details.\n\n\\x1b[1;36mTroubleshooting Suggestions:\\x1b[0m\n1. Check if your logic implements the required functionality correctly\n2. Verify that you've connected all signals properly\n3. Review the implementation steps in the guide\n4. Look at the hints for additional guidance\n\n\\x1b[33mHint:\\x1b[0m Review the design requirements and ensure your implementation matches the specifications.\n`);\n        setNotification({\n          open: true,\n          message: 'Your code compiles but has implementation issues.',\n          severity: 'warning'\n        });\n      }\n      setIsCompiling(false);\n    }, 1500);\n  };\n  const handleSaveCode = () => {\n    setNotification({\n      open: true,\n      message: 'Code saved successfully!',\n      severity: 'success'\n    });\n  };\n  const handleCloseNotification = () => {\n    setNotification({\n      ...notification,\n      open: false\n    });\n  };\n  const handleShowHint = () => {\n    setTabValue(2); // Switch to the Hints tab\n  };\n  const handleCopyCode = () => {\n    navigator.clipboard.writeText(code);\n    setNotification({\n      open: true,\n      message: 'Code copied to clipboard!',\n      severity: 'info'\n    });\n  };\n  const handleDownloadCode = () => {\n    const blob = new Blob([code], {\n      type: 'text/plain'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${selectedModule}.v`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  // More robust syntax verification\n  const verifySyntax = code => {\n    const errors = [];\n\n    // Check for basic syntax elements\n    if (!code.includes('module')) errors.push('Missing module declaration');\n    if (!code.includes('endmodule')) errors.push('Missing endmodule statement');\n\n    // Module-specific checks\n    if (selectedModule === 'full_adder') {\n      if (!code.includes('input') || !code.includes('a') || !code.includes('b') || !code.includes('cin')) errors.push('Missing input port declarations (a, b, cin)');\n      if (!code.includes('output') || !code.includes('sum') || !code.includes('cout')) errors.push('Missing output port declarations (sum, cout)');\n      if (!code.includes('assign sum') && !code.includes('assign sum =')) errors.push('Missing sum output assignment');\n      if (!code.includes('assign cout') && !code.includes('assign cout =')) errors.push('Missing cout output assignment');\n    } else if (selectedModule === 'ripple_carry_adder') {\n      if (!code.includes('input') || !code.includes('[3:0] a') || !code.includes('[3:0] b')) errors.push('Missing 4-bit input port declarations');\n      if (!code.includes('output') || !code.includes('[3:0] sum') || !code.includes('cout')) errors.push('Missing output port declarations');\n    }\n    return errors;\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"container page-container\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        mb: 4,\n        flexWrap: 'wrap',\n        gap: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          component: Link,\n          to: \"/modules\",\n          startIcon: /*#__PURE__*/_jsxDEV(ArrowBack, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 24\n          }, this),\n          sx: {\n            mb: 2\n          },\n          children: \"Back to Modules\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          component: \"h1\",\n          sx: {\n            fontWeight: 'bold',\n            color: 'primary.main'\n          },\n          children: \"VeriGeek Code Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"Write, test, and simulate Verilog HDL code in your browser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          minWidth: 300\n        },\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          variant: \"outlined\",\n          size: \"small\",\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"module-selector-label\",\n            children: \"Practice Module\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"module-selector-label\",\n            id: \"module-selector\",\n            value: selectedModule,\n            onChange: handleModuleChange,\n            label: \"Practice Module\",\n            children: practiceModules.map(module => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: module.id,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  display: 'flex',\n                  alignItems: 'center',\n                  width: '100%',\n                  justifyContent: 'space-between'\n                },\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  children: module.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 701,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: /*#__PURE__*/_jsxDEV(Chip, {\n                    label: module.level,\n                    size: \"small\",\n                    sx: {\n                      ml: 1,\n                      bgcolor: module.level === 'Beginner' ? '#e3f2fd' : module.level === 'Intermediate' ? '#fff8e1' : '#fbe9e7',\n                      color: module.level === 'Beginner' ? '#0277bd' : module.level === 'Intermediate' ? '#ff8f00' : '#e64a19',\n                      fontSize: '0.75rem'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 703,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 700,\n                columnNumber: 19\n              }, this)\n            }, module.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 699,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 7\n    }, this), exerciseData && /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 3,\n        mb: 4,\n        borderRadius: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            gutterBottom: true,\n            sx: {\n              fontWeight: 'bold',\n              color: 'primary.main'\n            },\n            children: exerciseData.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            paragraph: true,\n            sx: {\n              maxWidth: '800px'\n            },\n            children: exerciseData.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            gap: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Chip, {\n            icon: /*#__PURE__*/_jsxDEV(Info, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 23\n            }, this),\n            label: `ID: ${exerciseData.id}`,\n            variant: \"outlined\",\n            size: \"small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        gutterBottom: true,\n        sx: {\n          fontWeight: 'bold',\n          mt: 3\n        },\n        children: \"Learning Objectives:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        dense: true,\n        disablePadding: true,\n        sx: {\n          mb: 2\n        },\n        children: exerciseData.objectives.map((objective, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n          sx: {\n            py: 0.5\n          },\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            sx: {\n              minWidth: 36\n            },\n            children: /*#__PURE__*/_jsxDEV(Check, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 753,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: objective\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 9\n    }, this), exerciseData && /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      sx: {\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 0,\n          variant: \"outlined\",\n          sx: {\n            p: 3,\n            height: '100%',\n            borderRadius: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            sx: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(MenuBook, {\n              color: \"primary\",\n              sx: {\n                mr: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 769,\n              columnNumber: 17\n            }, this), \" Background\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            paragraph: true,\n            children: exerciseData.background\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 15\n          }, this), exerciseData.truthTable && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              sx: {\n                mt: 2,\n                mb: 1,\n                fontWeight: 'bold'\n              },\n              children: \"Truth Table:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                overflowX: 'auto'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                style: {\n                  width: '100%',\n                  borderCollapse: 'collapse',\n                  textAlign: 'center',\n                  fontSize: '0.9rem',\n                  border: '1px solid #e0e0e0'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    style: {\n                      backgroundColor: '#f5f5f5'\n                    },\n                    children: Object.keys(exerciseData.truthTable[0]).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                      style: {\n                        padding: '8px',\n                        border: '1px solid #e0e0e0'\n                      },\n                      children: key.toUpperCase()\n                    }, key, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 790,\n                      columnNumber: 29\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 788,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 787,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: exerciseData.truthTable.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    style: {\n                      backgroundColor: index % 2 === 0 ? 'white' : '#fafafa'\n                    },\n                    children: Object.values(row).map((value, idx) => /*#__PURE__*/_jsxDEV(\"td\", {\n                      style: {\n                        padding: '8px',\n                        border: '1px solid #e0e0e0'\n                      },\n                      children: value\n                    }, idx, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 800,\n                      columnNumber: 31\n                    }, this))\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 798,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 796,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 779,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 6,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 0,\n          variant: \"outlined\",\n          sx: {\n            p: 3,\n            height: '100%',\n            borderRadius: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            sx: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Assignment, {\n              color: \"primary\",\n              sx: {\n                mr: 1\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 816,\n              columnNumber: 17\n            }, this), \" Implementation Guide\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 815,\n            columnNumber: 15\n          }, this), exerciseData.imageUrl && /*#__PURE__*/_jsxDEV(Box, {\n            component: \"img\",\n            src: exerciseData.imageUrl,\n            alt: `${exerciseData.title} diagram`,\n            sx: {\n              width: '100%',\n              maxHeight: '200px',\n              objectFit: 'contain',\n              mb: 2,\n              borderRadius: 1,\n              border: '1px solid #e0e0e0'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            gutterBottom: true,\n            sx: {\n              fontWeight: 'bold'\n            },\n            children: \"Implementation Steps:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 835,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(List, {\n            dense: true,\n            children: [selectedModule === 'full_adder' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 843,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 843,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"1. Define an intermediate wire for a XOR b\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 844,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 842,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 847,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 847,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"2. Calculate the sum as (a XOR b) XOR cin\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 848,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 846,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 851,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 851,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"3. Calculate the carry out as (a AND b) OR (cin AND (a XOR b))\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 852,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 850,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true), selectedModule === 'ripple_carry_adder' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 860,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 860,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"1. Create a full adder module or instantiate it directly\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 861,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 864,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 864,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"2. Create internal wires for the carry signals between adders\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 865,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 863,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 868,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 868,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"3. Connect the carry out of each adder to the carry in of the next\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 869,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 867,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 872,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 872,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"4. Properly connect the input bits to each full adder\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 873,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 871,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true), selectedModule === 'alu' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 881,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 881,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"1. Create an always block for combinational logic\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 882,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 880,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 885,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 885,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"2. Use a case statement to handle the different operations\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 886,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 884,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 889,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 889,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"3. Implement each operation (ADD, SUB, AND, OR)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 890,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 888,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 893,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 893,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"4. Create a separate assignment for the zero flag\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 894,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 892,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true), selectedModule === 'fsm_traffic' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 902,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 902,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"1. Define state parameters and a state register\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 903,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 901,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 906,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 906,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"2. Create an always block for state transitions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 907,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 905,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 910,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 910,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"3. Create another always block for output logic\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 911,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 909,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  children: /*#__PURE__*/_jsxDEV(Check, {\n                    color: \"primary\",\n                    fontSize: \"small\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 914,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 914,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: \"4. Handle the reset condition to initialize the FSM\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 915,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 913,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 765,\n      columnNumber: 9\n    }, this), exerciseData && exerciseData.testCases && /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 3,\n        mb: 4,\n        borderRadius: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        sx: {\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Assignment, {\n          color: \"primary\",\n          sx: {\n            mr: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 929,\n          columnNumber: 13\n        }, this), \" Test Cases\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 928,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          mb: 2\n        },\n        children: \"Your implementation will be validated against these test cases. Make sure your code handles all these scenarios correctly.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 931,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          overflowX: 'auto'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          style: {\n            width: '100%',\n            borderCollapse: 'collapse',\n            textAlign: 'left',\n            fontSize: '0.9rem',\n            border: '1px solid #e0e0e0'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: {\n                backgroundColor: '#f5f5f5'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '10px',\n                  border: '1px solid #e0e0e0'\n                },\n                children: \"Test Case\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 944,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '10px',\n                  border: '1px solid #e0e0e0'\n                },\n                children: \"Inputs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 945,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '10px',\n                  border: '1px solid #e0e0e0'\n                },\n                children: \"Expected Outputs\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 946,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                style: {\n                  padding: '10px',\n                  border: '1px solid #e0e0e0'\n                },\n                children: \"Explanation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 947,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 943,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 942,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: exerciseData.testCases.map((testCase, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              style: {\n                backgroundColor: index % 2 === 0 ? 'white' : '#fafafa'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '10px',\n                  border: '1px solid #e0e0e0',\n                  fontWeight: 'bold'\n                },\n                children: [\"Case \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 953,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '10px',\n                  border: '1px solid #e0e0e0',\n                  fontFamily: 'monospace'\n                },\n                children: testCase.inputs\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 954,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '10px',\n                  border: '1px solid #e0e0e0',\n                  fontFamily: 'monospace'\n                },\n                children: testCase.expectedOutputs\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 955,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                style: {\n                  padding: '10px',\n                  border: '1px solid #e0e0e0'\n                },\n                children: testCase.explanation\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 956,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 952,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 950,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 935,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 934,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 927,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 7,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            borderRadius: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              p: 2,\n              borderBottom: 1,\n              borderColor: 'divider',\n              bgcolor: '#f5f5f5',\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Code, {\n                sx: {\n                  mr: 1\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 972,\n                columnNumber: 17\n              }, this), \"Verilog Editor\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 971,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                display: 'flex',\n                gap: 1\n              },\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                startIcon: /*#__PURE__*/_jsxDEV(ContentCopy, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 978,\n                  columnNumber: 30\n                }, this),\n                onClick: handleCopyCode,\n                sx: {\n                  textTransform: 'none'\n                },\n                children: \"Copy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 976,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"small\",\n                startIcon: /*#__PURE__*/_jsxDEV(Download, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 986,\n                  columnNumber: 30\n                }, this),\n                onClick: handleDownloadCode,\n                sx: {\n                  textTransform: 'none'\n                },\n                children: \"Download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 984,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 975,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 970,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flexGrow: 1,\n              p: 0,\n              bgcolor: '#272822',\n              minHeight: '500px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: code,\n              onChange: e => setCode(e.target.value),\n              style: {\n                width: '100%',\n                height: '100%',\n                minHeight: '500px',\n                fontFamily: 'Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace',\n                fontSize: '14px',\n                padding: '16px',\n                border: 'none',\n                borderRadius: 0,\n                resize: 'none',\n                backgroundColor: '#272822',\n                color: '#f8f8f2',\n                lineHeight: '1.5',\n                outline: 'none'\n              },\n              spellCheck: \"false\",\n              placeholder: \"// Write your Verilog code here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 995,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 994,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              p: 2,\n              borderTop: 1,\n              borderColor: 'divider',\n              display: 'flex',\n              gap: 1,\n              bgcolor: '#f5f5f5'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(PlayArrow, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1021,\n                columnNumber: 28\n              }, this),\n              onClick: handleRunCode,\n              disabled: isCompiling,\n              size: \"large\",\n              children: isCompiling ? 'Running...' : 'Run Code'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1018,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              startIcon: /*#__PURE__*/_jsxDEV(Save, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1030,\n                columnNumber: 28\n              }, this),\n              onClick: handleSaveCode,\n              size: \"large\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1028,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"secondary\",\n              startIcon: /*#__PURE__*/_jsxDEV(LightbulbOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1039,\n                columnNumber: 28\n              }, this),\n              onClick: handleShowHint,\n              sx: {\n                ml: 'auto'\n              },\n              size: \"large\",\n              children: \"Hint\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1036,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1017,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 969,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 968,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 5,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 3,\n          sx: {\n            display: 'flex',\n            flexDirection: 'column',\n            height: '100%',\n            borderRadius: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Tabs, {\n            value: tabValue,\n            onChange: handleTabChange,\n            sx: {\n              borderBottom: 1,\n              borderColor: 'divider',\n              bgcolor: '#f5f5f5'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Simulation\",\n              icon: /*#__PURE__*/_jsxDEV(Assessment, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1062,\n                columnNumber: 45\n              }, this),\n              iconPosition: \"start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1062,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Console\",\n              icon: /*#__PURE__*/_jsxDEV(Terminal, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1063,\n                columnNumber: 42\n              }, this),\n              iconPosition: \"start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1063,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Hints\",\n              icon: /*#__PURE__*/_jsxDEV(LightbulbOutlined, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1064,\n                columnNumber: 40\n              }, this),\n              iconPosition: \"start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1064,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Tab, {\n              label: \"Debug\",\n              icon: /*#__PURE__*/_jsxDEV(BugReport, {\n                fontSize: \"small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1065,\n                columnNumber: 40\n              }, this),\n              iconPosition: \"start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1065,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 13\n          }, this), tabValue === 0 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flexGrow: 1,\n              p: 2,\n              fontFamily: 'Consolas, Monaco, monospace',\n              fontSize: '14px',\n              bgcolor: '#2d2d2d',\n              color: '#e6e6e6',\n              overflowY: 'auto',\n              whiteSpace: 'pre-wrap',\n              minHeight: '500px'\n            },\n            children: isCompiling ? /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                p: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(LinearProgress, {\n                color: \"primary\",\n                sx: {\n                  mb: 2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1085,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                sx: {\n                  color: '#a6e22e'\n                },\n                children: \"Compiling and running your code...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1086,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1084,\n              columnNumber: 19\n            }, this) : output ? /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"pre\",\n              sx: {\n                margin: 0,\n                fontFamily: 'inherit',\n                fontSize: 'inherit'\n              },\n              children: output\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1092,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              sx: {\n                color: '#75715e',\n                fontStyle: 'italic'\n              },\n              children: \"// Run your code to see the simulation results here. // The simulator will check your implementation against the test cases.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1096,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1070,\n            columnNumber: 15\n          }, this), tabValue === 1 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flexGrow: 1,\n              p: 2,\n              fontFamily: 'Consolas, Monaco, monospace',\n              fontSize: '14px',\n              bgcolor: '#2d2d2d',\n              color: '#e6e6e6',\n              overflowY: 'auto',\n              whiteSpace: 'pre-wrap',\n              minHeight: '500px'\n            },\n            children: consoleOutput ? /*#__PURE__*/_jsxDEV(Typography, {\n              component: \"pre\",\n              sx: {\n                margin: 0,\n                fontFamily: 'inherit',\n                fontSize: 'inherit'\n              },\n              children: consoleOutput\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1121,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              sx: {\n                color: '#75715e',\n                fontStyle: 'italic'\n              },\n              children: \"// Verilog compiler messages will appear here. // This includes warnings and errors from your code.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1125,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1107,\n            columnNumber: 15\n          }, this), tabValue === 2 && exerciseData && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flexGrow: 1,\n              p: 3,\n              bgcolor: '#fffde7',\n              overflowY: 'auto',\n              minHeight: '500px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Helpful Hints\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1144,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              paragraph: true,\n              children: \"If you're stuck, these hints may guide you in the right direction without giving away the full solution.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1147,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(List, {\n              children: exerciseData.hints.map((hint, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n                alignItems: \"flex-start\",\n                sx: {\n                  px: 0\n                },\n                children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n                  sx: {\n                    minWidth: 36,\n                    mt: 0.5\n                  },\n                  children: /*#__PURE__*/_jsxDEV(LightbulbOutlined, {\n                    color: \"warning\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1154,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1153,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: `Hint ${index + 1}`,\n                  secondary: hint,\n                  primaryTypographyProps: {\n                    fontWeight: 'bold'\n                  },\n                  secondaryTypographyProps: {\n                    variant: 'body1'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1156,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1152,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1150,\n              columnNumber: 17\n            }, this), selectedModule === 'full_adder' && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 3,\n                p: 2,\n                bgcolor: 'rgba(0, 0, 0, 0.03)',\n                borderRadius: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"subtitle1\",\n                gutterBottom: true,\n                sx: {\n                  fontWeight: 'bold'\n                },\n                children: \"Full Adder Logic:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1168,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                paragraph: true,\n                children: \"A full adder adds three bits (a, b, and cin) and produces a sum bit and a carry bit.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1171,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                component: \"img\",\n                src: \"https://www.researchgate.net/publication/329466923/figure/fig12/AS:701497183633415@1544299999838/A-full-adder-circuit-and-its-truth-table.png\",\n                alt: \"Full Adder Logic Diagram\",\n                sx: {\n                  width: '100%',\n                  borderRadius: 1,\n                  mb: 2\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1174,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                children: \"The boolean equations for a full adder are:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1180,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  bgcolor: 'white',\n                  p: 2,\n                  borderRadius: 1,\n                  fontFamily: 'math',\n                  fontSize: '1rem',\n                  textAlign: 'center',\n                  mt: 1\n                },\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  children: \"sum = a \\u2295 b \\u2295 cin\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1192,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: \"cout = (a\\xB7b) + cin\\xB7(a\\u2295b)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1193,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1183,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1167,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1135,\n            columnNumber: 15\n          }, this), tabValue === 3 && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              flexGrow: 1,\n              p: 3,\n              overflowY: 'auto',\n              minHeight: '500px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Syntax Verification\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1210,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              paragraph: true,\n              children: \"Let's check your code for common syntax issues and potential problems:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1213,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              color: \"primary\",\n              startIcon: /*#__PURE__*/_jsxDEV(BugReport, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1220,\n                columnNumber: 30\n              }, this),\n              onClick: () => {\n                const errors = verifySyntax(code);\n                if (errors.length === 0) {\n                  setConsoleOutput(\"Syntax verification passed! No obvious issues found.\\n\\nThis doesn't guarantee your code is functionally correct, but the basic structure looks good.\");\n                } else {\n                  setConsoleOutput(\"Syntax verification failed. Issues found:\\n\\n\" + errors.map(err => `- ${err}`).join('\\n'));\n                }\n                setTabValue(1); // Switch to console tab\n              },\n              sx: {\n                mb: 3\n              },\n              children: \"Check Syntax\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1217,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {\n              sx: {\n                my: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1235,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Common Verilog Syntax\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1237,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              gutterBottom: true,\n              sx: {\n                fontWeight: 'bold',\n                mt: 2\n              },\n              children: \"Module Declaration:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1241,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                bgcolor: '#f5f5f5',\n                p: 2,\n                borderRadius: 1,\n                fontFamily: 'monospace',\n                mb: 2\n              },\n              children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                style: {\n                  margin: 0\n                },\n                children: `module module_name(\n  input wire signal_a,\n  input wire [3:0] signal_b,\n  output wire out_1,\n  output reg [7:0] out_2\n);\n  // Module body\nendmodule`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1251,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1244,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              gutterBottom: true,\n              sx: {\n                fontWeight: 'bold',\n                mt: 2\n              },\n              children: \"Always Block (Combinational):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1263,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                bgcolor: '#f5f5f5',\n                p: 2,\n                borderRadius: 1,\n                fontFamily: 'monospace',\n                mb: 2\n              },\n              children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                style: {\n                  margin: 0\n                },\n                children: `always @(*) begin\n  // Code executes when any input changes\n  result = a + b;\nend`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1273,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1266,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              gutterBottom: true,\n              sx: {\n                fontWeight: 'bold',\n                mt: 2\n              },\n              children: \"Always Block (Sequential):\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1281,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                bgcolor: '#f5f5f5',\n                p: 2,\n                borderRadius: 1,\n                fontFamily: 'monospace',\n                mb: 2\n              },\n              children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                style: {\n                  margin: 0\n                },\n                children: `always @(posedge clk or posedge reset) begin\n  if (reset)\n    counter <= 0;\n  else\n    counter <= counter + 1;\nend`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1291,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1284,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1202,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1052,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 966,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: notification.open,\n      autoHideDuration: 6000,\n      onClose: handleCloseNotification,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseNotification,\n        severity: notification.severity,\n        sx: {\n          width: '100%'\n        },\n        children: notification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1313,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1307,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 667,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeEditor, \"xTPpO2IG8Y8TmXDGDZd+EX16kEc=\", false, function () {\n  return [useSearchParams];\n});\n_c = CodeEditor;\nexport default CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","Link","useSearchParams","Box","Typography","Button","Grid","Paper","Tabs","Tab","Snackbar","Alert","List","ListItem","ListItemIcon","ListItemText","LinearProgress","FormControl","InputLabel","Select","MenuItem","Chip","Divider","PlayArrow","Save","ArrowBack","LightbulbOutlined","BarChart","Check","MenuBook","Assignment","Code","Terminal","Assessment","Info","BugReport","Download","Upload","ContentCopy","ContentPaste","jsxDEV","_jsxDEV","Fragment","_Fragment","CodeEditor","_s","searchParams","setSearchParams","selectedModule","setSelectedModule","get","code","setCode","output","setOutput","consoleOutput","setConsoleOutput","isCompiling","setIsCompiling","tabValue","setTabValue","notification","setNotification","open","message","severity","exerciseData","setExerciseData","practiceModules","id","name","level","category","handleModuleChange","event","moduleId","target","value","module","fetchModuleData","Promise","resolve","setTimeout","moduleTemplate","title","description","objectives","background","testCases","inputs","expectedOutputs","explanation","hints","truthTable","a","b","cin","sum","cout","imageUrl","handleTabChange","_","newValue","handleRunCode","errors","verifySyntax","length","map","err","join","simulationPassed","includes","handleSaveCode","handleCloseNotification","handleShowHint","handleCopyCode","navigator","clipboard","writeText","handleDownloadCode","blob","Blob","type","url","URL","createObjectURL","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","push","className","children","sx","display","justifyContent","mb","flexWrap","gap","component","to","startIcon","fileName","_jsxFileName","lineNumber","columnNumber","variant","fontWeight","color","minWidth","fullWidth","size","labelId","onChange","label","alignItems","width","ml","bgcolor","fontSize","elevation","p","borderRadius","gutterBottom","paragraph","maxWidth","icon","mt","dense","disablePadding","objective","index","py","primary","container","spacing","item","xs","md","height","mr","overflowX","style","borderCollapse","textAlign","border","backgroundColor","Object","keys","key","padding","toUpperCase","row","values","idx","src","alt","maxHeight","objectFit","testCase","fontFamily","flexDirection","borderBottom","borderColor","onClick","textTransform","flexGrow","minHeight","e","resize","lineHeight","outline","spellCheck","placeholder","borderTop","disabled","iconPosition","overflowY","whiteSpace","margin","fontStyle","hint","px","secondary","primaryTypographyProps","secondaryTypographyProps","my","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","_c","$RefreshReg$"],"sources":["C:/Users/omdag/OneDrive/Desktop/gfg/client/src/pages/CodeEditor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link, useSearchParams } from 'react-router-dom';\r\nimport { \r\n  Box, Typography, Button, Grid, Paper, Tabs, Tab, Snackbar, Alert, \r\n  List, ListItem, ListItemIcon, ListItemText, LinearProgress,\r\n  FormControl, InputLabel, Select, MenuItem, Chip, Divider\r\n} from '@mui/material';\r\nimport { \r\n  PlayArrow, Save, ArrowBack, LightbulbOutlined, BarChart, Check, \r\n  MenuBook, Assignment, Code, Terminal, Assessment, Info,\r\n  BugReport, Download, Upload, ContentCopy, ContentPaste\r\n} from '@mui/icons-material';\r\n\r\nconst CodeEditor = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [selectedModule, setSelectedModule] = useState(searchParams.get('module') || 'full_adder');\r\n  const [code, setCode] = useState('');\r\n  const [output, setOutput] = useState('');\r\n  const [consoleOutput, setConsoleOutput] = useState('');\r\n  const [isCompiling, setIsCompiling] = useState(false);\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [notification, setNotification] = useState({ open: false, message: '', severity: 'info' });\r\n  const [exerciseData, setExerciseData] = useState(null);\r\n\r\n  // Available practice modules\r\n  const practiceModules = [\r\n    { id: 'full_adder', name: 'Full Adder', level: 'Beginner', category: 'Combinational' },\r\n    { id: 'ripple_carry_adder', name: '4-bit Ripple Carry Adder', level: 'Beginner', category: 'Combinational' },\r\n    { id: 'alu', name: '4-bit ALU', level: 'Intermediate', category: 'Combinational' },\r\n    { id: 'counter', name: '4-bit Counter', level: 'Beginner', category: 'Sequential' },\r\n    { id: 'shift_register', name: '8-bit Shift Register', level: 'Intermediate', category: 'Sequential' },\r\n    { id: 'fsm_traffic', name: 'Traffic Light Controller FSM', level: 'Intermediate', category: 'Sequential' },\r\n    { id: 'uart_tx', name: 'UART Transmitter', level: 'Advanced', category: 'Communication' },\r\n    { id: 'memory_controller', name: 'Simple Memory Controller', level: 'Advanced', category: 'Memory' },\r\n    { id: 'fifo', name: 'Synchronous FIFO', level: 'Advanced', category: 'Memory' },\r\n  ];\r\n\r\n  // Handle module selection change\r\n  const handleModuleChange = (event) => {\r\n    const moduleId = event.target.value;\r\n    setSelectedModule(moduleId);\r\n    setSearchParams({ module: moduleId });\r\n    // Reset output\r\n    setOutput('');\r\n    setConsoleOutput('');\r\n    setTabValue(0);\r\n  };\r\n\r\n  // Fetch module data when selection changes\r\n  useEffect(() => {\r\n    // In a real application, this would be an API call\r\n    // For now, we'll simulate fetching data for different modules\r\n    const fetchModuleData = async () => {\r\n      // Simulate API call delay\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      \r\n      let moduleTemplate;\r\n      \r\n      switch(selectedModule) {\r\n        case 'full_adder':\r\n          moduleTemplate = `module full_adder(\r\n  input wire a, b, cin,\r\n  output wire sum, cout\r\n);\r\n  // TODO: Implement full adder logic\r\n  // sum = a XOR b XOR cin\r\n  // cout = (a AND b) OR (cin AND (a XOR b))\r\n  \r\n  // Your code here:\r\n  \r\nendmodule\r\n\r\n// Testbench (uncomment to simulate)\r\n/*\r\nmodule full_adder_tb;\r\n  // Testbench signals\r\n  reg a, b, cin;\r\n  wire sum, cout;\r\n  \r\n  // Instantiate the full_adder\r\n  full_adder dut(\r\n    .a(a),\r\n    .b(b),\r\n    .cin(cin),\r\n    .sum(sum),\r\n    .cout(cout)\r\n  );\r\n  \r\n  // Test stimulus\r\n  initial begin\r\n    // Display header\r\n    $display(\"a b cin | sum cout\");\r\n    $display(\"--------+---------\");\r\n    \r\n    // Test all input combinations\r\n    {a, b, cin} = 3'b000; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b001; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b010; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b011; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b100; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b101; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b110; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    {a, b, cin} = 3'b111; #10;\r\n    $display(\"%b %b %b  |  %b   %b\", a, b, cin, sum, cout);\r\n    \r\n    $finish;\r\n  end\r\nendmodule\r\n*/`;\r\n          setExerciseData({\r\n            id: 'full_adder',\r\n            title: 'Implementing a Full Adder',\r\n            description: 'Create a Verilog module for a full adder with inputs a, b, cin and outputs sum and cout. A full adder adds three bits and produces a sum bit and a carry bit.',\r\n            objectives: [\r\n              'Understand the operation of a full adder circuit',\r\n              'Implement combinational logic using Verilog assign statements',\r\n              'Utilize internal wires for intermediate signals',\r\n              'Apply proper port declarations with the wire data type'\r\n            ],\r\n            background: 'A full adder is a fundamental building block in digital circuit design, used to add two binary digits along with a carry input. It produces a sum output and a carry output, which can be cascaded to create multi-bit adders.',\r\n            testCases: [\r\n              { inputs: 'a=0, b=0, cin=0', expectedOutputs: 'sum=0, cout=0', explanation: 'With all inputs 0, both sum and carry are 0' },\r\n              { inputs: 'a=1, b=0, cin=0', expectedOutputs: 'sum=1, cout=0', explanation: 'Adding just a single 1 gives sum=1, with no carry' },\r\n              { inputs: 'a=0, b=1, cin=0', expectedOutputs: 'sum=1, cout=0', explanation: 'Adding just a single 1 gives sum=1, with no carry' },\r\n              { inputs: 'a=0, b=0, cin=1', expectedOutputs: 'sum=1, cout=0', explanation: 'Adding just a single 1 gives sum=1, with no carry' },\r\n              { inputs: 'a=1, b=1, cin=0', expectedOutputs: 'sum=0, cout=1', explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)' },\r\n              { inputs: 'a=1, b=0, cin=1', expectedOutputs: 'sum=0, cout=1', explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)' },\r\n              { inputs: 'a=0, b=1, cin=1', expectedOutputs: 'sum=0, cout=1', explanation: 'Adding two 1s results in 0 with a carry of 1 (binary 10)' },\r\n              { inputs: 'a=1, b=1, cin=1', expectedOutputs: 'sum=1, cout=1', explanation: 'Adding three 1s results in 1 with a carry of 1 (binary 11)' }\r\n            ],\r\n            hints: [\r\n              'Remember the boolean equations for a full adder: sum = a ⊕ b ⊕ cin and cout = (a·b) + (cin·(a⊕b))',\r\n              'Use intermediate wires to make your code more readable',\r\n              'The XOR operator in Verilog is represented by the caret symbol (^)',\r\n              'Use the & operator for AND and | operator for OR operations'\r\n            ],\r\n            truthTable: [\r\n              { a: 0, b: 0, cin: 0, sum: 0, cout: 0 },\r\n              { a: 0, b: 0, cin: 1, sum: 1, cout: 0 },\r\n              { a: 0, b: 1, cin: 0, sum: 1, cout: 0 },\r\n              { a: 0, b: 1, cin: 1, sum: 0, cout: 1 },\r\n              { a: 1, b: 0, cin: 0, sum: 1, cout: 0 },\r\n              { a: 1, b: 0, cin: 1, sum: 0, cout: 1 },\r\n              { a: 1, b: 1, cin: 0, sum: 0, cout: 1 },\r\n              { a: 1, b: 1, cin: 1, sum: 1, cout: 1 }\r\n            ],\r\n            imageUrl: 'https://www.researchgate.net/publication/329466923/figure/fig12/AS:701497183633415@1544299999838/A-full-adder-circuit-and-its-truth-table.png'\r\n          });\r\n          break;\r\n          \r\n        case 'ripple_carry_adder':\r\n          moduleTemplate = `module ripple_carry_adder(\r\n  input [3:0] a, b,\r\n  input cin,\r\n  output [3:0] sum,\r\n  output cout\r\n);\r\n  // TODO: Implement a 4-bit ripple carry adder\r\n  // Hint: You can use full adders connected in series\r\n  \r\n  // Your code here:\r\n  \r\nendmodule\r\n\r\n// Optional: Define a full adder module below\r\n// module full_adder(...);\r\n// ...\r\n// endmodule`;\r\n          \r\n          setExerciseData({\r\n            id: 'ripple_carry_adder',\r\n            title: 'Implementing a 4-bit Ripple Carry Adder',\r\n            description: 'Create a Verilog module for a 4-bit ripple carry adder that adds two 4-bit numbers and produces a 4-bit sum and a carry out.',\r\n            objectives: [\r\n              'Understand multi-bit adder design',\r\n              'Learn to reuse components in digital design',\r\n              'Practice connecting modules together',\r\n              'Implement a cascaded design pattern'\r\n            ],\r\n            background: 'A ripple carry adder combines multiple full adders to add multi-bit numbers. The carry bit \"ripples\" from one adder to the next, which is simple to implement but can introduce propagation delays.',\r\n            testCases: [\r\n              { inputs: 'a=0000, b=0000, cin=0', expectedOutputs: 'sum=0000, cout=0', explanation: 'Adding zeros gives zero' },\r\n              { inputs: 'a=1010, b=0101, cin=0', expectedOutputs: 'sum=1111, cout=0', explanation: '10 + 5 = 15 (no carry out)' },\r\n              { inputs: 'a=1111, b=0001, cin=0', expectedOutputs: 'sum=0000, cout=1', explanation: '15 + 1 = 16 (rolls over with carry)' },\r\n              { inputs: 'a=1111, b=1111, cin=0', expectedOutputs: 'sum=1110, cout=1', explanation: '15 + 15 = 30 (exceeds 4 bits)' }\r\n            ],\r\n            hints: [\r\n              'Start by designing or reusing a full adder module',\r\n              'Connect four full adders, with the carry output of each going to the carry input of the next',\r\n              'The first full adder takes the cin input, and the last full adder produces the cout output',\r\n              'Remember to use proper bit indices when connecting multi-bit signals'\r\n            ],\r\n            imageUrl: 'https://www.researchgate.net/publication/265755789/figure/fig1/AS:668550417743875@1536402642245/4-bit-Ripple-Carry-Adder.png'\r\n          });\r\n          break;\r\n          \r\n        case 'alu':\r\n          moduleTemplate = `module alu_4bit(\r\n  input [3:0] a, b,\r\n  input [1:0] op,\r\n  output reg [3:0] result,\r\n  output zero\r\n);\r\n  // TODO: Implement a 4-bit ALU with the following operations:\r\n  // op = 00: ADD (a + b)\r\n  // op = 01: SUB (a - b)\r\n  // op = 10: AND (a & b)\r\n  // op = 11: OR (a | b)\r\n  // zero flag should be set when result is 0\r\n  \r\n  // Your code here:\r\n  \r\nendmodule`;\r\n          \r\n          setExerciseData({\r\n            id: 'alu',\r\n            title: 'Designing a 4-bit ALU',\r\n            description: 'Create a 4-bit Arithmetic Logic Unit (ALU) that can perform addition, subtraction, AND, and OR operations.',\r\n            objectives: [\r\n              'Design a multi-functional digital component',\r\n              'Implement operation selection using control signals',\r\n              'Practice using conditional (case) statements in Verilog',\r\n              'Understand zero flag generation'\r\n            ],\r\n            background: 'An ALU is a fundamental digital circuit that performs arithmetic and logical operations. ALUs are a critical component in CPU design, forming the heart of the execution unit.',\r\n            testCases: [\r\n              { inputs: 'a=0101, b=0011, op=00', expectedOutputs: 'result=1000, zero=0', explanation: 'ADD: 5 + 3 = 8' },\r\n              { inputs: 'a=1000, b=0011, op=01', expectedOutputs: 'result=0101, zero=0', explanation: 'SUB: 8 - 3 = 5' },\r\n              { inputs: 'a=1001, b=0011, op=10', expectedOutputs: 'result=0001, zero=0', explanation: 'AND: 1001 & 0011 = 0001' },\r\n              { inputs: 'a=1000, b=0011, op=11', expectedOutputs: 'result=1011, zero=0', explanation: 'OR: 1000 | 0011 = 1011' },\r\n              { inputs: 'a=0011, b=0011, op=01', expectedOutputs: 'result=0000, zero=1', explanation: 'SUB: 3 - 3 = 0 (zero flag set)' }\r\n            ],\r\n            hints: [\r\n              'Use a case statement to implement different operations based on the op input',\r\n              'For subtraction, remember that a - b can be implemented as a + (complement of b) + 1',\r\n              'The zero flag is set when all bits of the result are 0',\r\n              'Use the always block with blocking assignments for combinational logic'\r\n            ],\r\n            imageUrl: 'https://www.allaboutcircuits.com/uploads/articles/an-introduction-to-arithmetic-logic-units-alus-fig2.jpg'\r\n          });\r\n          break;\r\n          \r\n        case 'fsm_traffic':\r\n          moduleTemplate = `module traffic_light_controller(\r\n  input clk,\r\n  input reset,\r\n  input enable,\r\n  output reg [2:0] highway_lights, // R, Y, G\r\n  output reg [2:0] farm_road_lights // R, Y, G\r\n);\r\n  // TODO: Implement a traffic light controller for a highway and farm road intersection\r\n  // The highway normally stays green, while the farm road stays red\r\n  // When enable is high, start the sequence to allow farm road traffic\r\n  // Proper yellow light timing should be included\r\n  // Hint: Define state parameters, create a state register, and use a state machine approach\r\n  \r\n  // Your code here:\r\n  \r\nendmodule`;\r\n          \r\n          setExerciseData({\r\n            id: 'fsm_traffic',\r\n            title: 'Traffic Light Controller FSM',\r\n            description: 'Design a traffic light controller for an intersection between a highway and a farm road using a finite state machine approach.',\r\n            objectives: [\r\n              'Implement a finite state machine (FSM) in Verilog',\r\n              'Practice sequential circuit design',\r\n              'Learn state encoding and transitions',\r\n              'Understand timing sequences in digital control systems'\r\n            ],\r\n            background: 'Traffic light controllers are classical examples of finite state machines. They need to maintain the current state, handle transitions based on inputs, and control outputs according to the current state.',\r\n            testCases: [\r\n              { inputs: 'enable=0 (steady state)', expectedOutputs: 'highway=GREEN, farm=RED', explanation: 'Normal operation with highway traffic flowing' },\r\n              { inputs: 'enable transitions to 1', expectedOutputs: 'Sequence starts: highway→YELLOW→RED, farm→RED→GREEN', explanation: 'Transition sequence initiated' },\r\n              { inputs: 'After timeout with enable=0', expectedOutputs: 'Sequence ends: highway→GREEN, farm→RED', explanation: 'Return to normal operation' }\r\n            ],\r\n            hints: [\r\n              'First, define your states using parameters (e.g., HWY_GREEN, HWY_YELLOW, etc.)',\r\n              'Use a state register to keep track of the current state',\r\n              'Implement two always blocks: one for state transitions and one for output logic',\r\n              'Don\\'t forget to handle the reset condition to initialize the FSM',\r\n              'Consider adding counters for timing the duration of each state'\r\n            ],\r\n            imageUrl: 'https://www.researchgate.net/publication/261209431/figure/fig2/AS:296969038467074@1447808916417/Basic-traffic-light-controller-state-diagram.png'\r\n          });\r\n          break;\r\n          \r\n        default:\r\n          moduleTemplate = '// Select a module from the dropdown to begin';\r\n          setExerciseData(null);\r\n      }\r\n      \r\n      setCode(moduleTemplate);\r\n    };\r\n\r\n    fetchModuleData();\r\n  }, [selectedModule]);\r\n\r\n  const handleTabChange = (_, newValue) => setTabValue(newValue);\r\n\r\n  const handleRunCode = () => {\r\n    setIsCompiling(true);\r\n    setOutput('');\r\n    setConsoleOutput('');\r\n    \r\n    // Validate code has the basic structure before attempting to \"compile\"\r\n    const errors = verifySyntax(code);\r\n    if (errors.length > 0) {\r\n      setTimeout(() => {\r\n        setConsoleOutput(`Syntax Verification Failed:\\n\\n${errors.map(err => `- ${err}`).join('\\n')}\\n\\nPlease fix these issues before running the code.`);\r\n        setOutput(`\\x1b[1;31mCompilation Error:\\x1b[0m\\nYour code has syntax issues that need to be fixed.\\nCheck the Console tab for details.`);\r\n        setNotification({\r\n          open: true,\r\n          message: 'Compilation failed. Please check your code for syntax issues.',\r\n          severity: 'error'\r\n        });\r\n        setIsCompiling(false);\r\n      }, 800);\r\n      return;\r\n    }\r\n    \r\n    // Simulate compilation and running with module-specific validation\r\n    setTimeout(() => {\r\n      let simulationPassed = false;\r\n      \r\n      // Module-specific validation\r\n      if (selectedModule === 'full_adder') {\r\n        if (code.includes('assign sum') && code.includes('assign cout')) {\r\n          // Check for common mistakes in full adder logic\r\n          if (\r\n            (code.includes('a ^ b ^ cin') || code.includes('a_xor_b ^ cin')) && \r\n            (\r\n              (code.includes('a & b') && code.includes('cin &') && code.includes('|')) ||\r\n              (code.includes('(a & b)') && code.includes('(cin &'))\r\n            )\r\n          ) {\r\n            simulationPassed = true;\r\n          } else {\r\n            setConsoleOutput(`Warning: Your full adder implementation may not be correct.\\n\\nExpected logic:\\n- sum = a ^ b ^ cin\\n- cout = (a & b) | (cin & (a ^ b))\\n\\nCheck your logic equations and try again.`);\r\n          }\r\n        }\r\n      } else if (selectedModule === 'ripple_carry_adder') {\r\n        if (code.includes('full_adder') && code.includes('[3:0] sum') && code.includes('cout')) {\r\n          // Check if the connections between adders are properly done\r\n          if (code.includes('wire') && (code.includes('carry') || code.includes('c1') || code.includes('c2'))) {\r\n            simulationPassed = true;\r\n          } else {\r\n            setConsoleOutput(`Warning: Your ripple carry adder implementation may not be correct.\\n\\nMake sure you've:\\n- Created internal wires for carries between adders\\n- Connected the full adders correctly in a chain\\n- Properly handled the 4-bit inputs and outputs`);\r\n          }\r\n        }\r\n      } else if (selectedModule === 'alu') {\r\n        if (code.includes('case') && code.includes('2\\'b00') && code.includes('assign zero')) {\r\n          simulationPassed = true;\r\n        }\r\n      } else if (selectedModule === 'fsm_traffic') {\r\n        if (code.includes('always @(posedge clk') && code.includes('parameter') && code.includes('state')) {\r\n          simulationPassed = true;\r\n        }\r\n      } else {\r\n        // For any other module, just check if it compiles\r\n        simulationPassed = true;\r\n      }\r\n      \r\n      if (simulationPassed) {\r\n        // Success output specific to each module\r\n        if (selectedModule === 'full_adder') {\r\n          setOutput(`\r\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\r\n\r\n\\x1b[1;36mRunning simulation for full_adder module...\\x1b[0m\r\n\r\n\\x1b[1;33mTruth Table Verification:\\x1b[0m\r\n┌─────┬─────┬─────┬─────┬─────┬─────┬─────────────────┐\r\n│ \\x1b[1mTest\\x1b[0m │ \\x1b[1ma\\x1b[0m   │ \\x1b[1mb\\x1b[0m   │ \\x1b[1mcin\\x1b[0m │ \\x1b[1msum\\x1b[0m │ \\x1b[1mcout\\x1b[0m │ \\x1b[1mStatus\\x1b[0m       │\r\n├─────┼─────┼─────┼─────┼─────┼─────┼─────────────────┤\r\n│ 1   │ 0   │ 0   │ 0   │ 0   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 2   │ 0   │ 0   │ 1   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 3   │ 0   │ 1   │ 0   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 4   │ 0   │ 1   │ 1   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 5   │ 1   │ 0   │ 0   │ 1   │ 0   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 6   │ 1   │ 0   │ 1   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 7   │ 1   │ 1   │ 0   │ 0   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│ 8   │ 1   │ 1   │ 1   │ 1   │ 1   │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n└─────┴─────┴─────┴─────┴─────┴─────┴─────────────────┘\r\n\r\n\\x1b[1;33mWaveform Simulation:\\x1b[0m\r\nTime  a b cin | sum cout\r\n----------------+----------\r\n0ns:  0 0 0   |  0   0\r\n10ns: 0 0 1   |  1   0\r\n20ns: 0 1 0   |  1   0\r\n30ns: 0 1 1   |  0   1\r\n40ns: 1 0 0   |  1   0\r\n50ns: 1 0 1   |  0   1\r\n60ns: 1 1 0   |  0   1\r\n70ns: 1 1 1   |  1   1\r\n\r\n\\x1b[1;32mSummary: 8/8 test cases passed.\\x1b[0m\r\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your full adder implementation works correctly.\r\n\r\n\\x1b[33mPerformance Analysis:\\x1b[0m\r\n• Gate Count: Approximately 5 gates (2 XOR, 2 AND, 1 OR)\r\n• Critical Path: Input to Sum output through 2 XOR gates\r\n• Additional Optimizations: Using intermediate signals improves readability\r\n\r\n\\x1b[36mDesign Feedback:\\x1b[0m\r\n✓ Good use of intermediate signals for readability\r\n✓ Properly declared wire and port types\r\n✓ Clean implementation of the full adder equations\r\n`);\r\n        } else if (selectedModule === 'ripple_carry_adder') {\r\n          setOutput(`\r\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\r\n\r\n\\x1b[1;36mRunning simulation for ripple_carry_adder module...\\x1b[0m\r\n\r\n\\x1b[1;33mTest Case Verification:\\x1b[0m\r\n┌─────┬─────────────┬─────────────┬─────────────────┐\r\n│ \\x1b[1mTest\\x1b[0m │ \\x1b[1mInputs\\x1b[0m      │ \\x1b[1mOutputs\\x1b[0m     │ \\x1b[1mStatus\\x1b[0m       │\r\n├─────┼─────────────┼─────────────┼─────────────────┤\r\n│ 1   │ a=0000      │ sum=0000    │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│     │ b=0000      │ cout=0      │                 │\r\n│     │ cin=0       │             │                 │\r\n├─────┼─────────────┼─────────────┼─────────────────┤\r\n│ 2   │ a=1010      │ sum=1111    │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│     │ b=0101      │ cout=0      │                 │\r\n│     │ cin=0       │             │                 │\r\n├─────┼─────────────┼─────────────┼─────────────────┤\r\n│ 3   │ a=1111      │ sum=0000    │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│     │ b=0001      │ cout=1      │                 │\r\n│     │ cin=0       │             │                 │\r\n├─────┼─────────────┼─────────────┼─────────────────┤\r\n│ 4   │ a=1111      │ sum=1110    │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│     │ b=1111      │ cout=1      │                 │\r\n│     │ cin=0       │             │                 │\r\n└─────┴─────────────┴─────────────┴─────────────────┘\r\n\r\n\\x1b[1;33mWaveform Simulation:\\x1b[0m\r\nTime    a     b     cin | sum   cout\r\n--------------------------------+------------\r\n0ns:    0000  0000  0   | 0000  0\r\n20ns:   1010  0101  0   | 1111  0\r\n40ns:   1111  0001  0   | 0000  1\r\n60ns:   1111  1111  0   | 1110  1\r\n\r\n\\x1b[1;32mSummary: 4/4 test cases passed.\\x1b[0m\r\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your ripple carry adder implementation works correctly.\r\n\r\n\\x1b[33mPerformance Analysis:\\x1b[0m\r\n• Propagation Delay: 4 full adder delays in series\r\n• Gate Count: Approximately 20 gates (4 full adders)\r\n• Critical Path: Through all 4 full adders for carry propagation\r\n• Potential Improvement: Consider a carry-lookahead structure for faster operation\r\n`);\r\n        } else if (selectedModule === 'alu') {\r\n          setOutput(`\r\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\r\n\r\n\\x1b[1;36mRunning simulation for alu_4bit module...\\x1b[0m\r\n\r\n\\x1b[1;33mTest Case Verification:\\x1b[0m\r\n┌─────┬────────────────┬────────────────┬─────────────────┐\r\n│ \\x1b[1mTest\\x1b[0m │ \\x1b[1mInputs\\x1b[0m         │ \\x1b[1mOutputs\\x1b[0m        │ \\x1b[1mStatus\\x1b[0m       │\r\n├─────┼────────────────┼────────────────┼─────────────────┤\r\n│ 1   │ a=0101         │ result=1000    │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│     │ b=0011         │ zero=0         │                 │\r\n│     │ op=00 (ADD)    │                │                 │\r\n├─────┼────────────────┼────────────────┼─────────────────┤\r\n│ 2   │ a=1000         │ result=0101    │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│     │ b=0011         │ zero=0         │                 │\r\n│     │ op=01 (SUB)    │                │                 │\r\n├─────┼────────────────┼────────────────┼─────────────────┤\r\n│ 3   │ a=1001         │ result=0001    │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│     │ b=0011         │ zero=0         │                 │\r\n│     │ op=10 (AND)    │                │                 │\r\n├─────┼────────────────┼────────────────┼─────────────────┤\r\n│ 4   │ a=1000         │ result=1011    │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│     │ b=0011         │ zero=0         │                 │\r\n│     │ op=11 (OR)     │                │                 │\r\n├─────┼────────────────┼────────────────┼─────────────────┤\r\n│ 5   │ a=0011         │ result=0000    │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n│     │ b=0011         │ zero=1         │                 │\r\n│     │ op=01 (SUB)    │                │                 │\r\n└─────┴────────────────┴────────────────┴─────────────────┘\r\n\r\n\\x1b[1;32mSummary: 5/5 test cases passed.\\x1b[0m\r\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your ALU implementation works correctly.\r\n\r\n\\x1b[33mPerformance Analysis:\\x1b[0m\r\n• Case statement properly handles all operations\r\n• Zero flag is correctly generated\r\n• Good structure for combinational logic\r\n`);\r\n        } else if (selectedModule === 'fsm_traffic') {\r\n          setOutput(`\r\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\r\n\r\n\\x1b[1;36mRunning simulation for traffic_light_controller module...\\x1b[0m\r\n\r\n\\x1b[1;33mSequence Verification:\\x1b[0m\r\nStarting with enable=0 (Highway: GREEN, Farm Road: RED)\r\n┌─────────┬───────┬──────────────┬─────────────────┬─────────────────┐\r\n│ \\x1b[1mTime\\x1b[0m    │ \\x1b[1mEnable\\x1b[0m │ \\x1b[1mHighway\\x1b[0m       │ \\x1b[1mFarm Road\\x1b[0m      │ \\x1b[1mStatus\\x1b[0m       │\r\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\r\n│ 0ns     │ 0     │ GREEN (001)  │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\r\n│ 20ns    │ 1     │ GREEN (001)  │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\r\n│ 40ns    │ 1     │ YELLOW (010) │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\r\n│ 60ns    │ 1     │ RED (100)    │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\r\n│ 80ns    │ 1     │ RED (100)    │ GREEN (001)     │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\r\n│ 100ns   │ 0     │ RED (100)    │ GREEN (001)     │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\r\n│ 120ns   │ 0     │ RED (100)    │ YELLOW (010)    │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\r\n│ 140ns   │ 0     │ RED (100)    │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n├─────────┼───────┼──────────────┼─────────────────┼─────────────────┤\r\n│ 160ns   │ 0     │ GREEN (001)  │ RED (100)       │ \\x1b[32m✓ PASSED\\x1b[0m      │\r\n└─────────┴───────┴──────────────┴─────────────────┴─────────────────┘\r\n\r\n\\x1b[1;32mSummary: State transitions successfully verified.\\x1b[0m\r\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your traffic light controller FSM implementation works correctly.\r\n\r\n\\x1b[33mDesign Feedback:\\x1b[0m\r\n✓ FSM state transitions are implemented correctly\r\n✓ Reset logic is properly handled\r\n✓ Outputs are correctly set based on state\r\n✓ Good structure for sequential control logic\r\n`);\r\n        } else {\r\n          // Generic success message for other modules\r\n          setOutput(`\r\n\\x1b[1;32m✓ Compilation successful!\\x1b[0m\r\n\r\n\\x1b[1;36mRunning simulation...\\x1b[0m\r\n\r\n\\x1b[1;33mTest Results:\\x1b[0m\r\nAll test cases have passed.\r\n\r\n\\x1b[1;32mSummary: Implementation verified successfully.\\x1b[0m\r\n🎉 \\x1b[1mCongratulations!\\x1b[0m Your implementation is functionally correct.\r\n`);\r\n        }\r\n        \r\n        setConsoleOutput(`Compilation successful. No errors or warnings detected.\\n\\nSimulation completed successfully.\\nAll test cases passed!\\n\\nSee the Simulation tab for detailed results.`);\r\n        \r\n        setNotification({\r\n          open: true,\r\n          message: 'Implementation successful! All tests passed.',\r\n          severity: 'success'\r\n        });\r\n      } else {\r\n        // Implementation issues\r\n        setOutput(`\r\n\\x1b[1;33mCompilation Warning:\\x1b[0m\r\nYour module compiles, but appears to have implementation issues.\r\n\r\n\\x1b[1;31mRuntime Errors:\\x1b[0m\r\nThe simulation indicates that your implementation does not correctly produce the expected outputs.\r\n\r\n\\x1b[1;33mVerification Results:\\x1b[0m\r\nTest cases failed. See the Console tab for details.\r\n\r\n\\x1b[1;36mTroubleshooting Suggestions:\\x1b[0m\r\n1. Check if your logic implements the required functionality correctly\r\n2. Verify that you've connected all signals properly\r\n3. Review the implementation steps in the guide\r\n4. Look at the hints for additional guidance\r\n\r\n\\x1b[33mHint:\\x1b[0m Review the design requirements and ensure your implementation matches the specifications.\r\n`);\r\n        \r\n        setNotification({\r\n          open: true,\r\n          message: 'Your code compiles but has implementation issues.',\r\n          severity: 'warning'\r\n        });\r\n      }\r\n      \r\n      setIsCompiling(false);\r\n    }, 1500);\r\n  };\r\n\r\n  const handleSaveCode = () => {\r\n    setNotification({\r\n      open: true,\r\n      message: 'Code saved successfully!',\r\n      severity: 'success'\r\n    });\r\n  };\r\n\r\n  const handleCloseNotification = () => {\r\n    setNotification({ ...notification, open: false });\r\n  };\r\n\r\n  const handleShowHint = () => {\r\n    setTabValue(2); // Switch to the Hints tab\r\n  };\r\n  \r\n  const handleCopyCode = () => {\r\n    navigator.clipboard.writeText(code);\r\n    setNotification({\r\n      open: true,\r\n      message: 'Code copied to clipboard!',\r\n      severity: 'info'\r\n    });\r\n  };\r\n  \r\n  const handleDownloadCode = () => {\r\n    const blob = new Blob([code], { type: 'text/plain' });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `${selectedModule}.v`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  };\r\n  \r\n  // More robust syntax verification\r\n  const verifySyntax = (code) => {\r\n    const errors = [];\r\n    \r\n    // Check for basic syntax elements\r\n    if (!code.includes('module')) errors.push('Missing module declaration');\r\n    if (!code.includes('endmodule')) errors.push('Missing endmodule statement');\r\n    \r\n    // Module-specific checks\r\n    if (selectedModule === 'full_adder') {\r\n      if (!code.includes('input') || !code.includes('a') || !code.includes('b') || !code.includes('cin')) \r\n        errors.push('Missing input port declarations (a, b, cin)');\r\n      if (!code.includes('output') || !code.includes('sum') || !code.includes('cout'))\r\n        errors.push('Missing output port declarations (sum, cout)');\r\n      if (!code.includes('assign sum') && !code.includes('assign sum ='))\r\n        errors.push('Missing sum output assignment');\r\n      if (!code.includes('assign cout') && !code.includes('assign cout ='))\r\n        errors.push('Missing cout output assignment');\r\n    } else if (selectedModule === 'ripple_carry_adder') {\r\n      if (!code.includes('input') || !code.includes('[3:0] a') || !code.includes('[3:0] b'))\r\n        errors.push('Missing 4-bit input port declarations');\r\n      if (!code.includes('output') || !code.includes('[3:0] sum') || !code.includes('cout'))\r\n        errors.push('Missing output port declarations');\r\n    }\r\n    \r\n    return errors;\r\n  };\r\n\r\n  return (\r\n    <Box className=\"container page-container\">\r\n      {/* Page Header */}\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 4, flexWrap: 'wrap', gap: 2 }}>\r\n        <Box>\r\n          <Button \r\n            component={Link} \r\n            to=\"/modules\" \r\n            startIcon={<ArrowBack />} \r\n            sx={{ mb: 2 }}\r\n          >\r\n            Back to Modules\r\n          </Button>\r\n          <Typography variant=\"h4\" component=\"h1\" sx={{ fontWeight: 'bold', color: 'primary.main' }}>\r\n            VeriGeek Code Editor\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"text.secondary\">\r\n            Write, test, and simulate Verilog HDL code in your browser\r\n          </Typography>\r\n        </Box>\r\n        \r\n        {/* Module Selector */}\r\n        <Box sx={{ minWidth: 300 }}>\r\n          <FormControl fullWidth variant=\"outlined\" size=\"small\">\r\n            <InputLabel id=\"module-selector-label\">Practice Module</InputLabel>\r\n            <Select\r\n              labelId=\"module-selector-label\"\r\n              id=\"module-selector\"\r\n              value={selectedModule}\r\n              onChange={handleModuleChange}\r\n              label=\"Practice Module\"\r\n            >\r\n              {practiceModules.map(module => (\r\n                <MenuItem key={module.id} value={module.id}>\r\n                  <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', justifyContent: 'space-between' }}>\r\n                    <Typography>{module.name}</Typography>\r\n                    <Box>\r\n                      <Chip\r\n                        label={module.level}\r\n                        size=\"small\"\r\n                        sx={{ \r\n                          ml: 1, \r\n                          bgcolor: module.level === 'Beginner' ? '#e3f2fd' : \r\n                                  module.level === 'Intermediate' ? '#fff8e1' : '#fbe9e7',\r\n                          color: module.level === 'Beginner' ? '#0277bd' : \r\n                                module.level === 'Intermediate' ? '#ff8f00' : '#e64a19',\r\n                          fontSize: '0.75rem'\r\n                        }}\r\n                      />\r\n                    </Box>\r\n                  </Box>\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n      </Box>\r\n      \r\n      {/* Exercise Info */}\r\n      {exerciseData && (\r\n        <Paper elevation={2} sx={{ p: 3, mb: 4, borderRadius: 2 }}>\r\n          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>\r\n            <Box>\r\n              <Typography variant=\"h5\" gutterBottom sx={{ fontWeight: 'bold', color: 'primary.main' }}>\r\n                {exerciseData.title}\r\n              </Typography>\r\n              <Typography paragraph sx={{ maxWidth: '800px' }}>\r\n                {exerciseData.description}\r\n              </Typography>\r\n            </Box>\r\n            <Box sx={{ display: 'flex', gap: 1 }}>\r\n              <Chip \r\n                icon={<Info fontSize=\"small\" />} \r\n                label={`ID: ${exerciseData.id}`} \r\n                variant=\"outlined\" \r\n                size=\"small\" \r\n              />\r\n            </Box>\r\n          </Box>\r\n          \r\n          {/* Learning Objectives */}\r\n          <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'bold', mt: 3 }}>\r\n            Learning Objectives:\r\n          </Typography>\r\n          <List dense disablePadding sx={{ mb: 2 }}>\r\n            {exerciseData.objectives.map((objective, index) => (\r\n              <ListItem key={index} sx={{ py: 0.5 }}>\r\n                <ListItemIcon sx={{ minWidth: 36 }}>\r\n                  <Check color=\"primary\" />\r\n                </ListItemIcon>\r\n                <ListItemText primary={objective} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Paper>\r\n      )}\r\n      \r\n      {/* Exercise Background */}\r\n      {exerciseData && (\r\n        <Grid container spacing={3} sx={{ mb: 4 }}>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper elevation={0} variant=\"outlined\" sx={{ p: 3, height: '100%', borderRadius: 2 }}>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <MenuBook color=\"primary\" sx={{ mr: 1 }} /> Background\r\n              </Typography>\r\n              <Typography paragraph>{exerciseData.background}</Typography>\r\n              \r\n              {/* Truth Table if available */}\r\n              {exerciseData.truthTable && (\r\n                <>\r\n                  <Typography variant=\"subtitle1\" sx={{ mt: 2, mb: 1, fontWeight: 'bold' }}>\r\n                    Truth Table:\r\n                  </Typography>\r\n                  <Box sx={{ overflowX: 'auto' }}>\r\n                    <table style={{ \r\n                      width: '100%', \r\n                      borderCollapse: 'collapse', \r\n                      textAlign: 'center',\r\n                      fontSize: '0.9rem',\r\n                      border: '1px solid #e0e0e0'\r\n                    }}>\r\n                      <thead>\r\n                        <tr style={{ backgroundColor: '#f5f5f5' }}>\r\n                          {Object.keys(exerciseData.truthTable[0]).map(key => (\r\n                            <th key={key} style={{ padding: '8px', border: '1px solid #e0e0e0' }}>\r\n                              {key.toUpperCase()}\r\n                            </th>\r\n                          ))}\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {exerciseData.truthTable.map((row, index) => (\r\n                          <tr key={index} style={{ backgroundColor: index % 2 === 0 ? 'white' : '#fafafa' }}>\r\n                            {Object.values(row).map((value, idx) => (\r\n                              <td key={idx} style={{ padding: '8px', border: '1px solid #e0e0e0' }}>\r\n                                {value}\r\n                              </td>\r\n                            ))}\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </Box>\r\n                </>\r\n              )}\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            <Paper elevation={0} variant=\"outlined\" sx={{ p: 3, height: '100%', borderRadius: 2 }}>\r\n              <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <Assignment color=\"primary\" sx={{ mr: 1 }} /> Implementation Guide\r\n              </Typography>\r\n              \r\n              {exerciseData.imageUrl && (\r\n                <Box\r\n                  component=\"img\"\r\n                  src={exerciseData.imageUrl}\r\n                  alt={`${exerciseData.title} diagram`}\r\n                  sx={{\r\n                    width: '100%',\r\n                    maxHeight: '200px',\r\n                    objectFit: 'contain',\r\n                    mb: 2,\r\n                    borderRadius: 1,\r\n                    border: '1px solid #e0e0e0'\r\n                  }}\r\n                />\r\n              )}\r\n              \r\n              <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'bold' }}>\r\n                Implementation Steps:\r\n              </Typography>\r\n              \r\n              <List dense>\r\n                {selectedModule === 'full_adder' && (\r\n                  <>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"1. Define an intermediate wire for a XOR b\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"2. Calculate the sum as (a XOR b) XOR cin\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"3. Calculate the carry out as (a AND b) OR (cin AND (a XOR b))\" />\r\n                    </ListItem>\r\n                  </>\r\n                )}\r\n                \r\n                {selectedModule === 'ripple_carry_adder' && (\r\n                  <>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"1. Create a full adder module or instantiate it directly\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"2. Create internal wires for the carry signals between adders\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"3. Connect the carry out of each adder to the carry in of the next\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"4. Properly connect the input bits to each full adder\" />\r\n                    </ListItem>\r\n                  </>\r\n                )}\r\n                \r\n                {selectedModule === 'alu' && (\r\n                  <>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"1. Create an always block for combinational logic\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"2. Use a case statement to handle the different operations\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"3. Implement each operation (ADD, SUB, AND, OR)\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"4. Create a separate assignment for the zero flag\" />\r\n                    </ListItem>\r\n                  </>\r\n                )}\r\n                \r\n                {selectedModule === 'fsm_traffic' && (\r\n                  <>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"1. Define state parameters and a state register\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"2. Create an always block for state transitions\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"3. Create another always block for output logic\" />\r\n                    </ListItem>\r\n                    <ListItem>\r\n                      <ListItemIcon><Check color=\"primary\" fontSize=\"small\" /></ListItemIcon>\r\n                      <ListItemText primary=\"4. Handle the reset condition to initialize the FSM\" />\r\n                    </ListItem>\r\n                  </>\r\n                )}\r\n              </List>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n      \r\n      {/* Test Cases */}\r\n      {exerciseData && exerciseData.testCases && (\r\n        <Paper elevation={2} sx={{ p: 3, mb: 4, borderRadius: 2 }}>\r\n          <Typography variant=\"h6\" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>\r\n            <Assignment color=\"primary\" sx={{ mr: 1 }} /> Test Cases\r\n          </Typography>\r\n          <Typography variant=\"body2\" sx={{ mb: 2 }}>\r\n            Your implementation will be validated against these test cases. Make sure your code handles all these scenarios correctly.\r\n          </Typography>\r\n          <Box sx={{ overflowX: 'auto' }}>\r\n            <table style={{ \r\n              width: '100%', \r\n              borderCollapse: 'collapse', \r\n              textAlign: 'left',\r\n              fontSize: '0.9rem',\r\n              border: '1px solid #e0e0e0'\r\n            }}>\r\n              <thead>\r\n                <tr style={{ backgroundColor: '#f5f5f5' }}>\r\n                  <th style={{ padding: '10px', border: '1px solid #e0e0e0' }}>Test Case</th>\r\n                  <th style={{ padding: '10px', border: '1px solid #e0e0e0' }}>Inputs</th>\r\n                  <th style={{ padding: '10px', border: '1px solid #e0e0e0' }}>Expected Outputs</th>\r\n                  <th style={{ padding: '10px', border: '1px solid #e0e0e0' }}>Explanation</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {exerciseData.testCases.map((testCase, index) => (\r\n                  <tr key={index} style={{ backgroundColor: index % 2 === 0 ? 'white' : '#fafafa' }}>\r\n                    <td style={{ padding: '10px', border: '1px solid #e0e0e0', fontWeight: 'bold' }}>Case {index + 1}</td>\r\n                    <td style={{ padding: '10px', border: '1px solid #e0e0e0', fontFamily: 'monospace' }}>{testCase.inputs}</td>\r\n                    <td style={{ padding: '10px', border: '1px solid #e0e0e0', fontFamily: 'monospace' }}>{testCase.expectedOutputs}</td>\r\n                    <td style={{ padding: '10px', border: '1px solid #e0e0e0' }}>{testCase.explanation}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </Box>\r\n        </Paper>\r\n      )}\r\n      \r\n      {/* Editor and Output */}\r\n      <Grid container spacing={3}>\r\n        {/* Editor Section */}\r\n        <Grid item xs={12} md={7}>\r\n          <Paper elevation={3} sx={{ height: '100%', display: 'flex', flexDirection: 'column', borderRadius: 2 }}>\r\n            <Box sx={{ p: 2, borderBottom: 1, borderColor: 'divider', bgcolor: '#f5f5f5', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n              <Typography variant=\"h6\" sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <Code sx={{ mr: 1 }} />\r\n                Verilog Editor\r\n              </Typography>\r\n              <Box sx={{ display: 'flex', gap: 1 }}>\r\n                <Button \r\n                  size=\"small\" \r\n                  startIcon={<ContentCopy />} \r\n                  onClick={handleCopyCode}\r\n                  sx={{ textTransform: 'none' }}\r\n                >\r\n                  Copy\r\n                </Button>\r\n                <Button \r\n                  size=\"small\" \r\n                  startIcon={<Download />} \r\n                  onClick={handleDownloadCode}\r\n                  sx={{ textTransform: 'none' }}\r\n                >\r\n                  Download\r\n                </Button>\r\n              </Box>\r\n            </Box>\r\n            <Box sx={{ flexGrow: 1, p: 0, bgcolor: '#272822', minHeight: '500px' }}>\r\n              <textarea\r\n                value={code}\r\n                onChange={(e) => setCode(e.target.value)}\r\n                style={{\r\n                  width: '100%',\r\n                  height: '100%',\r\n                  minHeight: '500px',\r\n                  fontFamily: 'Consolas, Monaco, \"Andale Mono\", \"Ubuntu Mono\", monospace',\r\n                  fontSize: '14px',\r\n                  padding: '16px',\r\n                  border: 'none',\r\n                  borderRadius: 0,\r\n                  resize: 'none',\r\n                  backgroundColor: '#272822',\r\n                  color: '#f8f8f2',\r\n                  lineHeight: '1.5',\r\n                  outline: 'none'\r\n                }}\r\n                spellCheck=\"false\"\r\n                placeholder=\"// Write your Verilog code here\"\r\n              />\r\n            </Box>\r\n            <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider', display: 'flex', gap: 1, bgcolor: '#f5f5f5' }}>\r\n              <Button \r\n                variant=\"contained\" \r\n                color=\"primary\" \r\n                startIcon={<PlayArrow />}\r\n                onClick={handleRunCode}\r\n                disabled={isCompiling}\r\n                size=\"large\"\r\n              >\r\n                {isCompiling ? 'Running...' : 'Run Code'}\r\n              </Button>\r\n              <Button \r\n                variant=\"outlined\" \r\n                startIcon={<Save />}\r\n                onClick={handleSaveCode}\r\n                size=\"large\"\r\n              >\r\n                Save\r\n              </Button>\r\n              <Button \r\n                variant=\"outlined\" \r\n                color=\"secondary\"\r\n                startIcon={<LightbulbOutlined />}\r\n                onClick={handleShowHint}\r\n                sx={{ ml: 'auto' }}\r\n                size=\"large\"\r\n              >\r\n                Hint\r\n              </Button>\r\n            </Box>\r\n          </Paper>\r\n        </Grid>\r\n        \r\n        {/* Output Section */}\r\n        <Grid item xs={12} md={5}>\r\n          <Paper elevation={3} sx={{ display: 'flex', flexDirection: 'column', height: '100%', borderRadius: 2 }}>\r\n            <Tabs \r\n              value={tabValue} \r\n              onChange={handleTabChange}\r\n              sx={{ \r\n                borderBottom: 1, \r\n                borderColor: 'divider',\r\n                bgcolor: '#f5f5f5'\r\n              }}\r\n            >\r\n              <Tab label=\"Simulation\" icon={<Assessment fontSize=\"small\" />} iconPosition=\"start\" />\r\n              <Tab label=\"Console\" icon={<Terminal fontSize=\"small\" />} iconPosition=\"start\" />\r\n              <Tab label=\"Hints\" icon={<LightbulbOutlined fontSize=\"small\" />} iconPosition=\"start\" />\r\n              <Tab label=\"Debug\" icon={<BugReport fontSize=\"small\" />} iconPosition=\"start\" />\r\n            </Tabs>\r\n            \r\n            {/* Simulation Output Tab */}\r\n            {tabValue === 0 && (\r\n              <Box \r\n                sx={{ \r\n                  flexGrow: 1, \r\n                  p: 2, \r\n                  fontFamily: 'Consolas, Monaco, monospace', \r\n                  fontSize: '14px',\r\n                  bgcolor: '#2d2d2d',\r\n                  color: '#e6e6e6',\r\n                  overflowY: 'auto',\r\n                  whiteSpace: 'pre-wrap',\r\n                  minHeight: '500px'\r\n                }}\r\n              >\r\n                {isCompiling ? (\r\n                  <Box sx={{ p: 2 }}>\r\n                    <LinearProgress color=\"primary\" sx={{ mb: 2 }} />\r\n                    <Typography variant=\"body2\" sx={{ color: '#a6e22e' }}>\r\n                      Compiling and running your code...\r\n                    </Typography>\r\n                  </Box>\r\n                ) : (\r\n                  output ? (\r\n                    <Typography component=\"pre\" sx={{ margin: 0, fontFamily: 'inherit', fontSize: 'inherit' }}>\r\n                      {output}\r\n                    </Typography>\r\n                  ) : (\r\n                    <Typography variant=\"body2\" sx={{ color: '#75715e', fontStyle: 'italic' }}>\r\n                      // Run your code to see the simulation results here.\r\n                      // The simulator will check your implementation against the test cases.\r\n                    </Typography>\r\n                  )\r\n                )}\r\n              </Box>\r\n            )}\r\n            \r\n            {/* Console Tab */}\r\n            {tabValue === 1 && (\r\n              <Box \r\n                sx={{ \r\n                  flexGrow: 1, \r\n                  p: 2, \r\n                  fontFamily: 'Consolas, Monaco, monospace', \r\n                  fontSize: '14px',\r\n                  bgcolor: '#2d2d2d',\r\n                  color: '#e6e6e6',\r\n                  overflowY: 'auto',\r\n                  whiteSpace: 'pre-wrap',\r\n                  minHeight: '500px'\r\n                }}\r\n              >\r\n                {consoleOutput ? (\r\n                  <Typography component=\"pre\" sx={{ margin: 0, fontFamily: 'inherit', fontSize: 'inherit' }}>\r\n                    {consoleOutput}\r\n                  </Typography>\r\n                ) : (\r\n                  <Typography variant=\"body2\" sx={{ color: '#75715e', fontStyle: 'italic' }}>\r\n                    // Verilog compiler messages will appear here.\r\n                    // This includes warnings and errors from your code.\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n            )}\r\n            \r\n            {/* Hints Tab */}\r\n            {tabValue === 2 && exerciseData && (\r\n              <Box \r\n                sx={{ \r\n                  flexGrow: 1, \r\n                  p: 3, \r\n                  bgcolor: '#fffde7',\r\n                  overflowY: 'auto',\r\n                  minHeight: '500px'\r\n                }}\r\n              >\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Helpful Hints\r\n                </Typography>\r\n                <Typography variant=\"body2\" paragraph>\r\n                  If you're stuck, these hints may guide you in the right direction without giving away the full solution.\r\n                </Typography>\r\n                <List>\r\n                  {exerciseData.hints.map((hint, index) => (\r\n                    <ListItem key={index} alignItems=\"flex-start\" sx={{ px: 0 }}>\r\n                      <ListItemIcon sx={{ minWidth: 36, mt: 0.5 }}>\r\n                        <LightbulbOutlined color=\"warning\" />\r\n                      </ListItemIcon>\r\n                      <ListItemText \r\n                        primary={`Hint ${index + 1}`} \r\n                        secondary={hint}\r\n                        primaryTypographyProps={{ fontWeight: 'bold' }}\r\n                        secondaryTypographyProps={{ variant: 'body1' }}\r\n                      />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n                \r\n                {selectedModule === 'full_adder' && (\r\n                  <Box sx={{ mt: 3, p: 2, bgcolor: 'rgba(0, 0, 0, 0.03)', borderRadius: 2 }}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'bold' }}>\r\n                      Full Adder Logic:\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" paragraph>\r\n                      A full adder adds three bits (a, b, and cin) and produces a sum bit and a carry bit.\r\n                    </Typography>\r\n                    <Box \r\n                      component=\"img\" \r\n                      src=\"https://www.researchgate.net/publication/329466923/figure/fig12/AS:701497183633415@1544299999838/A-full-adder-circuit-and-its-truth-table.png\" \r\n                      alt=\"Full Adder Logic Diagram\" \r\n                      sx={{ width: '100%', borderRadius: 1, mb: 2 }} \r\n                    />\r\n                    <Typography variant=\"body2\">\r\n                      The boolean equations for a full adder are:\r\n                    </Typography>\r\n                    <Box sx={{ \r\n                      bgcolor: 'white', \r\n                      p: 2, \r\n                      borderRadius: 1, \r\n                      fontFamily: 'math', \r\n                      fontSize: '1rem',\r\n                      textAlign: 'center',\r\n                      mt: 1\r\n                    }}>\r\n                      <Box>sum = a ⊕ b ⊕ cin</Box>\r\n                      <Box>cout = (a·b) + cin·(a⊕b)</Box>\r\n                    </Box>\r\n                  </Box>\r\n                )}\r\n              </Box>\r\n            )}\r\n            \r\n            {/* Debug Tab */}\r\n            {tabValue === 3 && (\r\n              <Box \r\n                sx={{ \r\n                  flexGrow: 1, \r\n                  p: 3, \r\n                  overflowY: 'auto',\r\n                  minHeight: '500px'\r\n                }}\r\n              >\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Syntax Verification\r\n                </Typography>\r\n                <Typography variant=\"body2\" paragraph>\r\n                  Let's check your code for common syntax issues and potential problems:\r\n                </Typography>\r\n                \r\n                <Button \r\n                  variant=\"outlined\" \r\n                  color=\"primary\" \r\n                  startIcon={<BugReport />}\r\n                  onClick={() => {\r\n                    const errors = verifySyntax(code);\r\n                    if (errors.length === 0) {\r\n                      setConsoleOutput(\"Syntax verification passed! No obvious issues found.\\n\\nThis doesn't guarantee your code is functionally correct, but the basic structure looks good.\");\r\n                    } else {\r\n                      setConsoleOutput(\"Syntax verification failed. Issues found:\\n\\n\" + errors.map(err => `- ${err}`).join('\\n'));\r\n                    }\r\n                    setTabValue(1); // Switch to console tab\r\n                  }}\r\n                  sx={{ mb: 3 }}\r\n                >\r\n                  Check Syntax\r\n                </Button>\r\n                \r\n                <Divider sx={{ my: 2 }} />\r\n                \r\n                <Typography variant=\"h6\" gutterBottom>\r\n                  Common Verilog Syntax\r\n                </Typography>\r\n                \r\n                <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'bold', mt: 2 }}>\r\n                  Module Declaration:\r\n                </Typography>\r\n                <Box sx={{ \r\n                  bgcolor: '#f5f5f5', \r\n                  p: 2, \r\n                  borderRadius: 1, \r\n                  fontFamily: 'monospace',\r\n                  mb: 2\r\n                }}>\r\n                  <pre style={{ margin: 0 }}>\r\n{`module module_name(\r\n  input wire signal_a,\r\n  input wire [3:0] signal_b,\r\n  output wire out_1,\r\n  output reg [7:0] out_2\r\n);\r\n  // Module body\r\nendmodule`}\r\n                  </pre>\r\n                </Box>\r\n                \r\n                <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'bold', mt: 2 }}>\r\n                  Always Block (Combinational):\r\n                </Typography>\r\n                <Box sx={{ \r\n                  bgcolor: '#f5f5f5', \r\n                  p: 2, \r\n                  borderRadius: 1, \r\n                  fontFamily: 'monospace',\r\n                  mb: 2\r\n                }}>\r\n                  <pre style={{ margin: 0 }}>\r\n{`always @(*) begin\r\n  // Code executes when any input changes\r\n  result = a + b;\r\nend`}\r\n                  </pre>\r\n                </Box>\r\n                \r\n                <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 'bold', mt: 2 }}>\r\n                  Always Block (Sequential):\r\n                </Typography>\r\n                <Box sx={{ \r\n                  bgcolor: '#f5f5f5', \r\n                  p: 2, \r\n                  borderRadius: 1, \r\n                  fontFamily: 'monospace',\r\n                  mb: 2\r\n                }}>\r\n                  <pre style={{ margin: 0 }}>\r\n{`always @(posedge clk or posedge reset) begin\r\n  if (reset)\r\n    counter <= 0;\r\n  else\r\n    counter <= counter + 1;\r\nend`}\r\n                  </pre>\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Notification */}\r\n      <Snackbar \r\n        open={notification.open} \r\n        autoHideDuration={6000} \r\n        onClose={handleCloseNotification}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert \r\n          onClose={handleCloseNotification} \r\n          severity={notification.severity} \r\n          sx={{ width: '100%' }}\r\n        >\r\n          {notification.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CodeEditor; "],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;QACM,CAAC,MAAM,IAAIN,cAAc,KAAK,oBAAoB,EAAE;UAClDM,SAAS,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;QACM,CAAC,MAAM,IAAIN,cAAc,KAAK,KAAK,EAAE;UACnCM,SAAS,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;QACM,CAAC,MAAM,IAAIN,cAAc,KAAK,aAAa,EAAE;UAC3CM,SAAS,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;QACM,CAAC,MAAM;UACL;UACAA,SAAS,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;QACM;QAEAE,gBAAgB,CAAC,uKAAuK,CAAC;QAEzLM,eAAe,CAAC;UACdC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE,8CAA8C;UACvDC,QAAQ,EAAE;QACZ,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACAX,SAAS,CAAC;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}