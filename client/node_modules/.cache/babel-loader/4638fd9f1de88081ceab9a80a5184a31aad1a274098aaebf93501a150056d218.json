{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omdag\\\\OneDrive\\\\Desktop\\\\gfg\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check if user is stored in localStorage\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n      setIsAuthenticated(true);\n    }\n    setLoading(false);\n  }, []);\n\n  // Mock login function (replace with actual API call in production)\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      // In a real app, this would be an API call\n      if (email === 'demo@example.com' && password === 'password') {\n        const userData = {\n          id: '123456',\n          name: 'Demo User',\n          email: 'demo@example.com',\n          role: 'user'\n        };\n\n        // Store in localStorage\n        localStorage.setItem('user', JSON.stringify(userData));\n\n        // Update state\n        setUser(userData);\n        setIsAuthenticated(true);\n        setError(null);\n        return {\n          success: true\n        };\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (err) {\n      setError(err.message);\n      return {\n        success: false,\n        error: err.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      loading,\n      error,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"AaZCefjEQIISzggwPe9U62ieYJk=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","storedUser","localStorage","getItem","JSON","parse","login","email","password","userData","id","name","role","setItem","stringify","success","Error","err","message","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/omdag/OneDrive/Desktop/gfg/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check if user is stored in localStorage\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      setUser(JSON.parse(storedUser));\r\n      setIsAuthenticated(true);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Mock login function (replace with actual API call in production)\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      // In a real app, this would be an API call\r\n      if (email === 'demo@example.com' && password === 'password') {\r\n        const userData = {\r\n          id: '123456',\r\n          name: 'Demo User',\r\n          email: 'demo@example.com',\r\n          role: 'user'\r\n        };\r\n        \r\n        // Store in localStorage\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        \r\n        // Update state\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n        setError(null);\r\n        return { success: true };\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n      return { success: false, error: err.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      isAuthenticated, \r\n      loading, \r\n      error,\r\n      login,\r\n      logout\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACdP,OAAO,CAACU,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;MAC/BL,kBAAkB,CAAC,IAAI,CAAC;IAC1B;IACAE,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACFV,UAAU,CAAC,IAAI,CAAC;MAChB;MACA,IAAIS,KAAK,KAAK,kBAAkB,IAAIC,QAAQ,KAAK,UAAU,EAAE;QAC3D,MAAMC,QAAQ,GAAG;UACfC,EAAE,EAAE,QAAQ;UACZC,IAAI,EAAE,WAAW;UACjBJ,KAAK,EAAE,kBAAkB;UACzBK,IAAI,EAAE;QACR,CAAC;;QAED;QACAV,YAAY,CAACW,OAAO,CAAC,MAAM,EAAET,IAAI,CAACU,SAAS,CAACL,QAAQ,CAAC,CAAC;;QAEtD;QACAf,OAAO,CAACe,QAAQ,CAAC;QACjBb,kBAAkB,CAAC,IAAI,CAAC;QACxBI,QAAQ,CAAC,IAAI,CAAC;QACd,OAAO;UAAEe,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZjB,QAAQ,CAACiB,GAAG,CAACC,OAAO,CAAC;MACrB,OAAO;QAAEH,OAAO,EAAE,KAAK;QAAEhB,KAAK,EAAEkB,GAAG,CAACC;MAAQ,CAAC;IAC/C,CAAC,SAAS;MACRpB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMqB,MAAM,GAAGA,CAAA,KAAM;IACnBjB,YAAY,CAACkB,UAAU,CAAC,MAAM,CAAC;IAC/B1B,OAAO,CAAC,IAAI,CAAC;IACbE,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,oBACER,OAAA,CAACC,WAAW,CAACgC,QAAQ;IAACC,KAAK,EAAE;MAC3B7B,IAAI;MACJE,eAAe;MACfE,OAAO;MACPE,KAAK;MACLO,KAAK;MACLa;IACF,CAAE;IAAA5B,QAAA,EACCA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClC,EAAA,CAlEWF,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AAoEzB,eAAeD,WAAW;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}